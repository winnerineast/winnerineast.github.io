<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Winnerineast Blog</title><link>https://winnerineast.github.io</link><description>Humachine Studio</description><copyright>Winnerineast Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://winnerineast.github.io</link></image><lastBuildDate>Fri, 15 Aug 2025 15:05:57 +0000</lastBuildDate><managingEditor>Winnerineast Blog</managingEditor><ttl>60</ttl><webMaster>Winnerineast Blog</webMaster><item><title>微软开源的 MarkItDown</title><link>https://winnerineast.github.io/post/wei-ruan-kai-yuan-de-%20MarkItDown.html</link><description>[开源项目重读] MarkItDown : 今天无意间看到微软开源的 MarkItDown 已经 71.2K⭐️了，试着重新解读它的技术实现和作用，学习它的抽象封装，但每种文件解析都有更好的实现，特别是 PDF。</description><guid isPermaLink="true">https://winnerineast.github.io/post/wei-ruan-kai-yuan-de-%20MarkItDown.html</guid><pubDate>Fri, 15 Aug 2025 15:05:27 +0000</pubDate></item><item><title>网页中接入 PDF viewer</title><link>https://winnerineast.github.io/post/wang-ye-zhong-jie-ru-%20PDF%20viewer.html</link><description>EmbedPDF：[https://github.com/embedpdf/embed-pdf-viewer](https://t.co/8mku6ukBqU)

Typescript 实现的，支持多种框架或者 vanilla.js，简单看了一下，真的非常棒，必须推荐一下。</description><guid isPermaLink="true">https://winnerineast.github.io/post/wang-ye-zhong-jie-ru-%20PDF%20viewer.html</guid><pubDate>Fri, 15 Aug 2025 13:26:56 +0000</pubDate></item><item><title>Awesome-GraphRAG</title><link>https://winnerineast.github.io/post/Awesome-GraphRAG.html</link><description>A curated list of resources (surveys, papers, benchmarks, and opensource projects) on graph-based retrieval-augmented generation. 

github .com/DEEP-PolyU/Awesome-GraphRAG

&lt;img width='952' height='580' alt='Image' src='https://github.com/user-attachments/assets/eef6fdd3-1fad-4e11-b6c9-bb2e412cc7b6' /&gt;。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Awesome-GraphRAG.html</guid><pubDate>Fri, 15 Aug 2025 13:25:27 +0000</pubDate></item><item><title>Google 刚刚发布了 Gemma-3-270M</title><link>https://winnerineast.github.io/post/Google%20-gang-gang-fa-bu-le-%20Gemma-3-270M.html</link><description>对，你没看错， 270M，不是270B。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Google%20-gang-gang-fa-bu-le-%20Gemma-3-270M.html</guid><pubDate>Fri, 15 Aug 2025 02:17:09 +0000</pubDate></item><item><title>2025 AI Agents 发展方向</title><link>https://winnerineast.github.io/post/2025%20AI%20Agents%20-fa-zhan-fang-xiang.html</link><description>&lt;img width='928' height='1207' alt='Image' src='https://github.com/user-attachments/assets/8f182f8d-a7d1-41df-891c-0d9d74b18220' /&gt;
📌自主检索增强生成 (Agentic RAG)
基于推理的，用于实时数据检索和生成的AI智能体工作流。</description><guid isPermaLink="true">https://winnerineast.github.io/post/2025%20AI%20Agents%20-fa-zhan-fang-xiang.html</guid><pubDate>Fri, 15 Aug 2025 02:15:30 +0000</pubDate></item><item><title>Routine：把 GPT-4o 准确率从 41% 拉到 96% 的企业级 Agent 稳定器（万字）</title><link>https://winnerineast.github.io/post/Routine%EF%BC%9A-ba-%20GPT-4o%20-zhun-que-lv-cong-%2041%25%20-la-dao-%2096%25%20-de-qi-ye-ji-%20Agent%20-wen-ding-qi-%EF%BC%88-wan-zi-%EF%BC%89.html</link><description>“ Routine 框架用 400 行 JSON 把 GPT-4o 在企业场景的端到端准确率从 41% 拉到 96%，14B 小模型也能逼近 SOTA——本文章拆解它到底做对了什么。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Routine%EF%BC%9A-ba-%20GPT-4o%20-zhun-que-lv-cong-%2041%25%20-la-dao-%2096%25%20-de-qi-ye-ji-%20Agent%20-wen-ding-qi-%EF%BC%88-wan-zi-%EF%BC%89.html</guid><pubDate>Thu, 14 Aug 2025 15:00:37 +0000</pubDate></item><item><title>Embedding Atlas</title><link>https://winnerineast.github.io/post/Embedding%20Atlas.html</link><description>https://github.com/apple/embedding-atlas

Embedding Atlas is a tool that provides interactive visualizations for large embeddings. It allows you to visualize, cross-filter, and search embeddings and metadata.

Features

🏷️ Automatic data clustering &amp; labeling: Interactively visualize and navigate overall data structure.

🫧 Kernel density estimation &amp; density contours: Easily explore and distinguish between dense regions of data and outliers.

🧊 Order-independent transparency: Ensure clear, accurate rendering of overlapping points.

🔍 Real-time search &amp; nearest neighbors: Find similar data to a given query or existing data point.

🚀 WebGPU implementation (with WebGL 2 fallback): Fast, smooth performance (up to few million points) with modern rendering stack.

📊 Multi-coordinated views for metadata exploration: Interactively link and filter data across metadata columns.

Please visit https://apple.github.io/embedding-atlas for a demo and documentation.。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Embedding%20Atlas.html</guid><pubDate>Tue, 12 Aug 2025 02:11:10 +0000</pubDate></item><item><title>A 23-page research paper reveals the number 1 method Hedge Funds use to beat the market</title><link>https://winnerineast.github.io/post/A%2023-page%20research%20paper%20reveals%20the%20number%201%20method%20Hedge%20Funds%20use%20to%20beat%20the%20market.html</link><description>&lt;img width='550' height='720' alt='Image' src='https://github.com/user-attachments/assets/4666d2c4-adba-4e95-a4b3-e7c60862f57e' /&gt;。</description><guid isPermaLink="true">https://winnerineast.github.io/post/A%2023-page%20research%20paper%20reveals%20the%20number%201%20method%20Hedge%20Funds%20use%20to%20beat%20the%20market.html</guid><pubDate>Sun, 10 Aug 2025 15:34:37 +0000</pubDate></item><item><title>Hugging Face 团队开源了一个强大的 AI 工具：AI Sheets</title><link>https://winnerineast.github.io/post/Hugging%20Face%20-tuan-dui-kai-yuan-le-yi-ge-qiang-da-de-%20AI%20-gong-ju-%EF%BC%9AAI%20Sheets.html</link><description>提供类似 Excel 表格的界面，无需编写代码，即可使用数千个开源模型来构建、丰富和转换数据集，支持本地部署或直接在 Hub 上使用。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Hugging%20Face%20-tuan-dui-kai-yuan-le-yi-ge-qiang-da-de-%20AI%20-gong-ju-%EF%BC%9AAI%20Sheets.html</guid><pubDate>Sun, 10 Aug 2025 15:31:43 +0000</pubDate></item><item><title>The Generative AI Data Scientist is NOW what companies want.</title><link>https://winnerineast.github.io/post/The%20Generative%20AI%20Data%20Scientist%20is%20NOW%20what%20companies%20want..html</link><description>&lt;img width='1696' height='900' alt='Image' src='https://github.com/user-attachments/assets/4d956c7e-6c86-4a7f-8722-bca4a765994d' /&gt;

Companies are sitting on mountains of unstructured data. 

PDF
Word docs
Meeting notes
Emails
Videos
Audio Transcripts

This is useful data. But it's unusable in its existing form.
The AI data scientist builds the systems to analyze information, gain business insights, and automates the process. 

- Models the system
- Use AI to extract insights
- Drives predictive business insights

&lt;img width='1201' height='649' alt='Image' src='https://github.com/user-attachments/assets/9953b5dd-6d28-4e37-af9b-981119753c5e' /&gt;
。</description><guid isPermaLink="true">https://winnerineast.github.io/post/The%20Generative%20AI%20Data%20Scientist%20is%20NOW%20what%20companies%20want..html</guid><pubDate>Sun, 10 Aug 2025 15:29:27 +0000</pubDate></item><item><title>AI Real Estate Agent Team</title><link>https://winnerineast.github.io/post/AI%20Real%20Estate%20Agent%20Team.html</link><description>https://cookbook.openai.com/articles/gpt-oss/fine-tune-transfomers

OpenAI gpt-oss (开源 LLM) + 
[@firecrawl_dev](https://x.com/firecrawl_dev)
 (搜索) + 
[@AgnoAgi](https://x.com/AgnoAgi)
 (Agent 框架) 打造一个 Multi-Agents AI 房地产中介团队，帮你快速找到心仪的房子 🏡 —— 来自 
[@Saboo_Shubham_](https://x.com/Saboo_Shubham_)
 的教程 
[@unwind_ai_](https://x.com/unwind_ai_)
 和开源项目实战分享 👏🏻

系统构成
系统基于 Agno Agent 框架，由三个专业 AI Agent 组成：房产搜索 Agent、市场分析 Agent 和 房产估值 Agent。</description><guid isPermaLink="true">https://winnerineast.github.io/post/AI%20Real%20Estate%20Agent%20Team.html</guid><pubDate>Thu, 07 Aug 2025 03:50:57 +0000</pubDate></item><item><title>Fine-tuning with gpt-oss and Hugging Face Transformers</title><link>https://winnerineast.github.io/post/Fine-tuning%20with%20gpt-oss%20and%20Hugging%20Face%20Transformers.html</link><description>https://cookbook.openai.com/articles/gpt-oss/fine-tune-transfomers

OpenAI 刚放出了昨天发布的 OSS 系列开放权重模型的微调教程。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Fine-tuning%20with%20gpt-oss%20and%20Hugging%20Face%20Transformers.html</guid><pubDate>Thu, 07 Aug 2025 03:39:15 +0000</pubDate></item><item><title>Efficient Agents: Building Effective Agents While Reducing Cost</title><link>https://winnerineast.github.io/post/Efficient%20Agents-%20Building%20Effective%20Agents%20While%20Reducing%20Cost.html</link><description>The remarkable capabilities of Large Language Model (LLM)-driven agents have enabled sophisticated systems to tackle complex, multi-step tasks, but their escalating costs threaten scalability and accessibility. This work presents the first systematic study of the efficiency-effectiveness trade-off in modern agent systems, addressing the critical need for cost-effective designs without sacrificing performance. We investigate three key questions: (1) How much complexity do agentic tasks inherently require? (2) When do additional modules yield diminishing returns? (3) How much efficiency can be gained through the design of efficient agent frameworks? Through an empirical analysis on the GAIA benchmark, we evaluate the impact of LLM backbone selection, agent framework designs, and test-time scaling strategies. Using the cost-of-pass metric, we quantify the efficiency-performance trade-off across these dimensions. Our findings inform the development of Efficient Agents , a novel agent framework that has an optimal complexity to task requirements. Efficient Agents retains 96.7% of the performance of OWL, one leading open-source agent framework, while reducing operational costs from 0.398 to 0.228, resulting in a 28.4% improvement in cost-of-pass. Our work provides actionable insights for designing efficient, high-performing agent systems, advancing the accessibility and sustainability of AI-driven solutions.

https://arxiv.org/abs/2508.02694


&lt;img width='1624' height='1868' alt='Image' src='https://github.com/user-attachments/assets/e9430bbd-31d2-4068-bd54-ab43fa3bcf3e' /&gt;。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Efficient%20Agents-%20Building%20Effective%20Agents%20While%20Reducing%20Cost.html</guid><pubDate>Thu, 07 Aug 2025 03:34:30 +0000</pubDate></item><item><title>Rethinking industrial artificial intelligence: A unified foundation framework</title><link>https://winnerineast.github.io/post/Rethinking%20industrial%20artificial%20intelligence-%20A%20unified%20foundation%20framework.html</link><description>美国马里兰大学Jay Lee教授和Hanqi Su博士最新前瞻性文章：工业人工智能的革新：统一基础框架 | IJAMD封面文章

英文原题：Rethinking industrial artificial intelligence: A unified foundation framework

通讯作者：Hanqi Su, University of Maryland

作者：Jay Lee, Hanqi Su*

引用信息: 

Lee J, Su H. Rethinking industrial artificial intelligence: A unified foundation framework. Int J AI Mater Design. 2025;2(2):56-68. doi: 10.36922/IJAMD025080006



文章背景



工业人工智能（AI）的快速发展正在重塑全球各行各业。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Rethinking%20industrial%20artificial%20intelligence-%20A%20unified%20foundation%20framework.html</guid><pubDate>Sun, 03 Aug 2025 04:01:22 +0000</pubDate></item><item><title>The Big LLM Architecture Comparison From DeepSeek-V3 to Kimi K2: A Look At Modern LLM Architecture Design</title><link>https://winnerineast.github.io/post/The%20Big%20LLM%20Architecture%20Comparison%20From%20DeepSeek-V3%20to%20Kimi%20K2-%20A%20Look%20At%20Modern%20LLM%20Architecture%20Design.html</link><description>[The Big LLM Architecture Comparison
From DeepSeek-V3 to Kimi K2: A Look At Modern LLM Architecture Design](https://sebastianraschka.com/blog/2025/the-big-llm-architecture-comparison.html)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/The%20Big%20LLM%20Architecture%20Comparison%20From%20DeepSeek-V3%20to%20Kimi%20K2-%20A%20Look%20At%20Modern%20LLM%20Architecture%20Design.html</guid><pubDate>Mon, 21 Jul 2025 03:47:18 +0000</pubDate></item><item><title>A Survey of Context Engineering</title><link>https://winnerineast.github.io/post/A%20Survey%20of%20Context%20Engineering.html</link><description>&lt;img width='604' height='680' alt='Image' src='https://github.com/user-attachments/assets/52e55e02-c9fb-4dda-a584-69e7bad821c9' /&gt;

The paper provides a taxonomy of context engineering in LLMs categorized into foundational components, system implementations, evaluation methodologies, and future directions.

&lt;img width='680' height='634' alt='Image' src='https://github.com/user-attachments/assets/63546a00-ecb1-4c4f-93e7-9f436b1302bb' /&gt;

The context engineering evolution timeline from 2020 to 2025 involves foundational RAG systems to complex multi-agent architectures.

&lt;img width='680' height='373' alt='Image' src='https://github.com/user-attachments/assets/16d3a7b2-02a1-409e-b0fb-4bac0c04fe59' /&gt;

The work distinguishes prompt engineering from context engineering on dimensions like state, scalability, error analysis, complexity, etc.

&lt;img width='680' height='208' alt='Image' src='https://github.com/user-attachments/assets/f6fd6566-1e4a-4a97-80d0-7dc5ec102dc2' /&gt;

Context engineering components include context retrieval and generation, context processing, context management, and how they are all integrated into systems implementation, such as RAG, memory architectures, tool-integrated reasoning, and multi-agent coordination mechanisms.

&lt;img width='679' height='245' alt='Image' src='https://github.com/user-attachments/assets/dce2fca1-293b-4ac0-a7ab-2466b14c4de8' /&gt;

One important aspect of context processing is contextual self-refinement, which aims to improve outputs through cyclical feedback mechanisms.

&lt;img width='680' height='453' alt='Image' src='https://github.com/user-attachments/assets/1b940c4e-b413-49e6-8226-ee2016f8f262' /&gt;

An important aspect of context management is how to deal efficiently with long context and reasoning chains. The paper provides an overview of and characteristics of key methods for long-chain reasoning.

&lt;img width='680' height='301' alt='Image' src='https://github.com/user-attachments/assets/a421300c-aac0-4342-94a8-06f258076879' /&gt;

Memory is key to building complex agentic systems that can adapt, learn, and perform coherent long-term tasks.

&lt;img width='680' height='367' alt='Image' src='https://github.com/user-attachments/assets/586808eb-ebdd-4d6d-a54a-6624b06ca857' /&gt;

There is also a nice overview of different memory implementation patterns.

&lt;img width='680' height='624' alt='Image' src='https://github.com/user-attachments/assets/97001f83-a770-4bdc-a9bc-75b6b20da762' /&gt;

Tool-calling capabilities in an area of continuous development in the space. The paper provides an overview of tool-augmented language model architectures and how they compare across tool categories.

&lt;img width='680' height='409' alt='Image' src='https://github.com/user-attachments/assets/30414437-683b-489a-9972-47d09cae9003' /&gt;

Context engineering is going to evolve rapidly.

But this is a great overview to better map and keep track of this rapidly evolving landscape.

There is a lot more in the paper. Over 1000+ references included.

This survey tries to capture the most common methods and biggest trends, but there is more on the horizon as models continue to improve in capability and new agent architectures emerge.

[arxiv.org/abs/2507.13334](https://t.co/fj8CBVd46H)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/A%20Survey%20of%20Context%20Engineering.html</guid><pubDate>Fri, 18 Jul 2025 23:55:39 +0000</pubDate></item><item><title>训练 Agent 能力的专用框架 - ART</title><link>https://winnerineast.github.io/post/xun-lian-%20Agent%20-neng-li-de-zhuan-yong-kuang-jia-%20-%20ART.html</link><description>简单来讲，这个框架可以将 GRPO 集成到你的 python 应用中，比如使用这个训练 Qwen2.5-7B 搜索邮件，或者玩各种游戏。</description><guid isPermaLink="true">https://winnerineast.github.io/post/xun-lian-%20Agent%20-neng-li-de-zhuan-yong-kuang-jia-%20-%20ART.html</guid><pubDate>Fri, 18 Jul 2025 02:55:26 +0000</pubDate></item><item><title>Mistral刚刚开源了一款语音理解模型：Voxtral，语音转录超过Whisper large-v3</title><link>https://winnerineast.github.io/post/Mistral-gang-gang-kai-yuan-le-yi-kuan-yu-yin-li-jie-mo-xing-%EF%BC%9AVoxtral%EF%BC%8C-yu-yin-zhuan-lu-chao-guo-Whisper%20large-v3.html</link><description>性能超GPT-4o mini Transcribe、Gemini 2.5 Flash，在英语短篇和Mozilla Common Voice上超过了ElevenLabs Scribe

上下文长度32k token
可处理长30分钟音频转录，或40分钟的语义理解

内置问答、摘要、多语言支持和语音函数调用功能

有两个型号，Voxtral (24B)、Voxtral Mini (3B)

https://huggingface.co/mistralai。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Mistral-gang-gang-kai-yuan-le-yi-kuan-yu-yin-li-jie-mo-xing-%EF%BC%9AVoxtral%EF%BC%8C-yu-yin-zhuan-lu-chao-guo-Whisper%20large-v3.html</guid><pubDate>Thu, 17 Jul 2025 04:24:08 +0000</pubDate></item><item><title>FireGEO:  开源的 SaaS 启动模板，专为希望快速构建现代化 Web 应用的开发者设计，集成了品牌监控、用户认证、计费系统和 AI 聊天功能。</title><link>https://winnerineast.github.io/post/FireGEO-%20%20-kai-yuan-de-%20SaaS%20-qi-dong-mo-ban-%EF%BC%8C-zhuan-wei-xi-wang-kuai-su-gou-jian-xian-dai-hua-%20Web%20-ying-yong-de-kai-fa-zhe-she-ji-%EF%BC%8C-ji-cheng-le-pin-pai-jian-kong-%E3%80%81-yong-hu-ren-zheng-%E3%80%81-ji-fei-xi-tong-he-%20AI%20-liao-tian-gong-neng-%E3%80%82.html</link><description>项目核心：快速启动你的 SaaS
FireGEO 的目标是帮开发者省去繁琐的配置和搭建工作，让你专注于业务逻辑。</description><guid isPermaLink="true">https://winnerineast.github.io/post/FireGEO-%20%20-kai-yuan-de-%20SaaS%20-qi-dong-mo-ban-%EF%BC%8C-zhuan-wei-xi-wang-kuai-su-gou-jian-xian-dai-hua-%20Web%20-ying-yong-de-kai-fa-zhe-she-ji-%EF%BC%8C-ji-cheng-le-pin-pai-jian-kong-%E3%80%81-yong-hu-ren-zheng-%E3%80%81-ji-fei-xi-tong-he-%20AI%20-liao-tian-gong-neng-%E3%80%82.html</guid><pubDate>Thu, 17 Jul 2025 04:22:30 +0000</pubDate></item><item><title>一款AI资讯信息管理工具：Revornix，它可以整合所有可见信息，按设定时间输出综合报告</title><link>https://winnerineast.github.io/post/yi-kuan-AI-zi-xun-xin-xi-guan-li-gong-ju-%EF%BC%9ARevornix%EF%BC%8C-ta-ke-yi-zheng-he-suo-you-ke-jian-xin-xi-%EF%BC%8C-an-she-ding-shi-jian-shu-chu-zong-he-bao-gao.html</link><description>基于多模态模型文档转化，并向量化存储

原生多租户，支持多用户并发使用，每个用户设有独立的文档库

内置MCP驱动的AI助手；支持多语言

https://github.com/Qingyon-AI/Revornix

&lt;img width='680' height='423' alt='Image' src='https://github.com/user-attachments/assets/d0632569-d3cf-4386-8aa9-2a7bcb514599' /&gt;。</description><guid isPermaLink="true">https://winnerineast.github.io/post/yi-kuan-AI-zi-xun-xin-xi-guan-li-gong-ju-%EF%BC%9ARevornix%EF%BC%8C-ta-ke-yi-zheng-he-suo-you-ke-jian-xin-xi-%EF%BC%8C-an-she-ding-shi-jian-shu-chu-zong-he-bao-gao.html</guid><pubDate>Thu, 17 Jul 2025 04:21:19 +0000</pubDate></item><item><title>WebMCP = 50行代码即可让网站支持MCP，让AI助手与Web应用进行交互</title><link>https://winnerineast.github.io/post/WebMCP%20%3D%2050-xing-dai-ma-ji-ke-rang-wang-zhan-zhi-chi-MCP%EF%BC%8C-rang-AI-zhu-shou-yu-Web-ying-yong-jin-xing-jiao-hu.html</link><description>50行代码即可让网站支持MCP，让AI助手与Web应用进行交互：WebMCP

其与Web应用直接集成，无需API密钥或OAuth配置，直接浏览器访问

实时同步，与Web应用状态直接集成

支持跨应用工作流，让AI助手在多个不同网页应用间自动完成任务

其优点是无需视觉解析，直接操作网页元素，大大提升了AI助手与网页交互速度

https://github.com/MiguelsPizza/WebMCP

&lt;img width='680' height='489' alt='Image' src='https://github.com/user-attachments/assets/bfeb30f0-f224-46d5-b996-093be33de3ac' /&gt;。</description><guid isPermaLink="true">https://winnerineast.github.io/post/WebMCP%20%3D%2050-xing-dai-ma-ji-ke-rang-wang-zhan-zhi-chi-MCP%EF%BC%8C-rang-AI-zhu-shou-yu-Web-ying-yong-jin-xing-jiao-hu.html</guid><pubDate>Thu, 17 Jul 2025 04:18:44 +0000</pubDate></item><item><title>用自己电脑的CPU微调大模型</title><link>https://winnerineast.github.io/post/yong-zi-ji-dian-nao-de-CPU-wei-diao-da-mo-xing.html</link><description>有没有想过用自己电脑的CPU微调大模型？来看——LoFT

这个项目是一个轻量级、CPU 友好的工具包，可以使用 QLoRA 微调 1–3B 的 大模型。</description><guid isPermaLink="true">https://winnerineast.github.io/post/yong-zi-ji-dian-nao-de-CPU-wei-diao-da-mo-xing.html</guid><pubDate>Thu, 17 Jul 2025 04:17:24 +0000</pubDate></item><item><title>一个可以分析球赛的框架——supervision</title><link>https://winnerineast.github.io/post/yi-ge-ke-yi-fen-xi-qiu-sai-de-kuang-jia-%E2%80%94%E2%80%94supervision.html</link><description>这个框架是一个一体化解决方案，从加载数据到绘制检测康再到计算检测框都可以完成。</description><guid isPermaLink="true">https://winnerineast.github.io/post/yi-ge-ke-yi-fen-xi-qiu-sai-de-kuang-jia-%E2%80%94%E2%80%94supervision.html</guid><pubDate>Thu, 17 Jul 2025 04:16:26 +0000</pubDate></item><item><title>DeepSeek V3/R1 vs. Kimi K2</title><link>https://winnerineast.github.io/post/DeepSeek%20V3-R1%20vs.%20Kimi%20K2.html</link><description>&lt;img width='4096' height='2142' alt='Image' src='https://github.com/user-attachments/assets/edfb843f-0e70-4d71-bb88-ec963ea0a412' /&gt;

Kimi-K2 与 DeepSeek-R1 架构对比，相比较下 Kimi-k2 增加了专家数量，减少了注意力头的数量。</description><guid isPermaLink="true">https://winnerineast.github.io/post/DeepSeek%20V3-R1%20vs.%20Kimi%20K2.html</guid><pubDate>Sun, 13 Jul 2025 04:11:05 +0000</pubDate></item><item><title>千脑系统，仿生空间智能学习</title><link>https://winnerineast.github.io/post/qian-nao-xi-tong-%EF%BC%8C-fang-sheng-kong-jian-zhi-neng-xue-xi.html</link><description>A good paper: https://arxiv.org/abs/2507.04494

&lt;img width='1700' height='1098' alt='Image' src='https://github.com/user-attachments/assets/e6a69ae4-ac1f-4b62-83ae-dd6155ee1eee' /&gt;

&lt;img width='1302' height='1652' alt='Image' src='https://github.com/user-attachments/assets/7a21e093-2de2-4a12-ad0a-061832a33a4d' /&gt;

&lt;img width='1918' height='1268' alt='Image' src='https://github.com/user-attachments/assets/3f746ded-ae5f-42bb-b7ee-29da4b5c8ec4' /&gt;

&lt;html&gt;
&lt;body&gt;
&lt;!--StartFragment--&gt;&lt;b style='font-weight:normal;' id='docs-internal-guid-8669252e-7fff-0ca9-302e-1f22518783c1'&gt;&lt;p dir='ltr' style='line-height:1.3799999713897704;margin-top:0pt;margin-bottom:12pt;'&gt;&lt;span style='font-size:11pt;font-family:'Google Sans Text',sans-serif;color:#1b1c1d;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;'&gt;好的，这篇论文介绍了一种名为&amp;ldquo;千脑系统&amp;rdquo;（Thousand-Brains Systems）的新型人工智能架构，并详细阐述了其首个实现——一个叫做 &lt;/span&gt;&lt;span style='font-size:11pt;font-family:'Google Sans Text',sans-serif;color:#1b1c1d;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;'&gt;Monty&lt;/span&gt;&lt;span style='font-size:11pt;font-family:'Google Sans Text',sans-serif;color:#1b1c1d;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;'&gt; 的系统。</description><guid isPermaLink="true">https://winnerineast.github.io/post/qian-nao-xi-tong-%EF%BC%8C-fang-sheng-kong-jian-zhi-neng-xue-xi.html</guid><pubDate>Sun, 13 Jul 2025 03:46:53 +0000</pubDate></item><item><title>Meta Superintelligence – Leadership Compute, Talent, and Data</title><link>https://winnerineast.github.io/post/Meta%20Superintelligence%20%E2%80%93%20Leadership%20Compute%2C%20Talent%2C%20and%20Data.html</link><description>Here's an interesting article I found:
[Meta Superintelligence: Leadership, Compute, Talent, and Data](https://semianalysis.com/2025/07/11/meta-superintelligence-leadership-compute-talent-and-data/)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Meta%20Superintelligence%20%E2%80%93%20Leadership%20Compute%2C%20Talent%2C%20and%20Data.html</guid><pubDate>Sun, 13 Jul 2025 03:44:16 +0000</pubDate></item><item><title>Omnitool：用一个开源免费的工具，玩转所有AI模型！</title><link>https://winnerineast.github.io/post/Omnitool%EF%BC%9A-yong-yi-ge-kai-yuan-mian-fei-de-gong-ju-%EF%BC%8C-wan-zhuan-suo-you-AI-mo-xing-%EF%BC%81.html</link><description>Original *2025年02月18日 06:05*

帮忙点击**蓝色字**，给个关注呗!

![Image](https://mmbiz.qpic.cn/sz_mmbiz_gif/Km2ahm6mpT3HBcWbIUIRp50ZULLYJWR29LRFAorV3TYpkbIOVz33kk9TF9icuQdTuXd65licNMmuTuoice1icdpqzA/640?wx_fmt=gif&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1)

  

请在微信客户端打开

在当今AI飞速发展的时代，无论是技术爱好者、开发者，还是普通用户，都热切渴望轻松接触和运用最新的AI技术。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Omnitool%EF%BC%9A-yong-yi-ge-kai-yuan-mian-fei-de-gong-ju-%EF%BC%8C-wan-zhuan-suo-you-AI-mo-xing-%EF%BC%81.html</guid><pubDate>Sat, 12 Jul 2025 12:24:13 +0000</pubDate></item><item><title>LSTM之父22年前构想将成真？一周内AI「自我进化」论文集中发布，新趋势涌现？</title><link>https://winnerineast.github.io/post/LSTM-zhi-fu-22-nian-qian-gou-xiang-jiang-cheng-zhen-%EF%BC%9F-yi-zhou-nei-AI%E3%80%8C-zi-wo-jin-hua-%E3%80%8D-lun-wen-ji-zhong-fa-bu-%EF%BC%8C-xin-qu-shi-yong-xian-%EF%BC%9F.html</link><description>*2025年06月02日 13:23*

机器之心报道

**编辑：张倩、+0**

  

让 AI 实现自我进化是人类一直以来的梦想。</description><guid isPermaLink="true">https://winnerineast.github.io/post/LSTM-zhi-fu-22-nian-qian-gou-xiang-jiang-cheng-zhen-%EF%BC%9F-yi-zhou-nei-AI%E3%80%8C-zi-wo-jin-hua-%E3%80%8D-lun-wen-ji-zhong-fa-bu-%EF%BC%8C-xin-qu-shi-yong-xian-%EF%BC%9F.html</guid><pubDate>Sat, 12 Jul 2025 12:23:50 +0000</pubDate></item><item><title>LLM已能自我更新权重，自适应、知识整合能力大幅提升，AI醒了</title><link>https://winnerineast.github.io/post/LLM-yi-neng-zi-wo-geng-xin-quan-zhong-%EF%BC%8C-zi-shi-ying-%E3%80%81-zhi-shi-zheng-he-neng-li-da-fu-ti-sheng-%EF%BC%8CAI-xing-le.html</link><description>*2025年06月14日 12:12*

机器之心报道

**编辑：Panda**

  

近段时间，关于 AI 自我演进/进化这一话题的研究和讨论开始变得愈渐密集。</description><guid isPermaLink="true">https://winnerineast.github.io/post/LLM-yi-neng-zi-wo-geng-xin-quan-zhong-%EF%BC%8C-zi-shi-ying-%E3%80%81-zhi-shi-zheng-he-neng-li-da-fu-ti-sheng-%EF%BC%8CAI-xing-le.html</guid><pubDate>Sat, 12 Jul 2025 12:23:34 +0000</pubDate></item><item><title>IBM - GneissWeb：打造10万亿级高质量训练数据！</title><link>https://winnerineast.github.io/post/IBM%20-%20GneissWeb%EF%BC%9A-da-zao-10-wan-yi-ji-gao-zhi-liang-xun-lian-shu-ju-%EF%BC%81.html</link><description>Original *2025年03月07日 08:23*

![Image](https://mmbiz.qpic.cn/mmbiz_png/KQq0TwTibbBCkxtlNyIIqPxczibeCnD19H1xH4Ivok6zfqGxqkUI5UmgPjFPxhbzzzwIS4TGjUH11wtCJ60sJYwA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1)

当下的AI热潮中，大家都在谈论ChatGPT、Claude这样的大语言模型有多么强大，但很少有人关注它们背后的'粮食'——训练数据。</description><guid isPermaLink="true">https://winnerineast.github.io/post/IBM%20-%20GneissWeb%EF%BC%9A-da-zao-10-wan-yi-ji-gao-zhi-liang-xun-lian-shu-ju-%EF%BC%81.html</guid><pubDate>Sat, 12 Jul 2025 12:23:10 +0000</pubDate></item><item><title>Claude含AI量超Cursor一倍！资深工程主管揭秘AI编码真相！谷歌谨慎全搞自研；软件架构教父：像从汇编时代跃迁到高级语言</title><link>https://winnerineast.github.io/post/Claude-han-AI-liang-chao-Cursor-yi-bei-%EF%BC%81-zi-shen-gong-cheng-zhu-guan-jie-mi-AI-bian-ma-zhen-xiang-%EF%BC%81-gu-ge-jin-shen-quan-gao-zi-yan-%EF%BC%9B-ruan-jian-jia-gou-jiao-fu-%EF%BC%9A-xiang-cong-hui-bian-shi-dai-yue-qian-dao-gao-ji-yu-yan.html</link><description>Claude含AI量超Cursor一倍！资深工程主管揭秘AI编码真相！谷歌谨慎全搞自研；软件架构教父：像从汇编时代跃迁到高级语言
Image
Image
编辑 | 伊风



这应该是我听过最扎实、最客观的一场 AI 编程演讲。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Claude-han-AI-liang-chao-Cursor-yi-bei-%EF%BC%81-zi-shen-gong-cheng-zhu-guan-jie-mi-AI-bian-ma-zhen-xiang-%EF%BC%81-gu-ge-jin-shen-quan-gao-zi-yan-%EF%BC%9B-ruan-jian-jia-gou-jiao-fu-%EF%BC%9A-xiang-cong-hui-bian-shi-dai-yue-qian-dao-gao-ji-yu-yan.html</guid><pubDate>Sat, 12 Jul 2025 12:22:23 +0000</pubDate></item><item><title>Circuit Tracing Revealing Computational Graphs in Language Models</title><link>https://winnerineast.github.io/post/Circuit%20Tracing%20Revealing%20Computational%20Graphs%20in%20Language%20Models.html</link><description>https://transformer-circuits.pub/2025/attribution-graphs/methods.html。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Circuit%20Tracing%20Revealing%20Computational%20Graphs%20in%20Language%20Models.html</guid><pubDate>Sat, 12 Jul 2025 12:20:36 +0000</pubDate></item><item><title>AI重要发展趋势：MCP 技术科普</title><link>https://winnerineast.github.io/post/AI-zhong-yao-fa-zhan-qu-shi-%EF%BC%9AMCP%20-ji-shu-ke-pu.html</link><description>This article popularizes the MCP technology, an important trend in AI development, including its definition, core components, related websites, clients, practical operations, and other resources. Key points include: ​

1.

Definition of MCP : MCP, short for Model Context Protocol, is an open protocol that standardizes how applications provide context to LLMs, similar to the USB-C interface for AI applications. ​

2.

Core components : MCP server exposes specific functions or data sources for AI models, while MCP client connects to these servers on behalf of the model, following principles like server connection and tool use. ​

3.

MCP service websites : Websites such as Smithery - Model Context Protocol Registry, PulseMCP, etc., provide MCP services. ​

4.

Supported clients : There are clients that support MCP, though specific ones aren't detailed here. ​

5.

Practical operations : Ten recommended MCP Servers for functions like search enhancement and database access are provided, along with installation methods using VS code with different tools. ​

6.

Use Case : An example of making the API of Conch AI into MCP to generate audio in one sentence is given. ​

7.

Other resources : Resources like Awesome MCP, official Anthropic MCP documents, sharing of MCP server configurations, learning videos, and product introductions are available. ​。</description><guid isPermaLink="true">https://winnerineast.github.io/post/AI-zhong-yao-fa-zhan-qu-shi-%EF%BC%9AMCP%20-ji-shu-ke-pu.html</guid><pubDate>Sat, 12 Jul 2025 12:19:08 +0000</pubDate></item><item><title>ai-toolkit Various AI scripts. Mostly Stable Diffusion stuff</title><link>https://winnerineast.github.io/post/ai-toolkit%20Various%20AI%20scripts.%20Mostly%20Stable%20Diffusion%20stuff.html</link><description>## Support My Work

If you enjoy my work, or use it for commercial purposes, please consider sponsoring me so I can continue to maintain it. Every bit helps!

[Become a sponsor on GitHub](https://github.com/orgs/ostris) or [support me on Patreon](https://www.patreon.com/ostris).

Thank you to all my current supporters!

*Last updated: 2025-03-08*

### GitHub Sponsors

[![Replicate](https://avatars.githubusercontent.com/u/60410876?v=4)](https://github.com/replicate 'Replicate')

### Patreon Supporters

[![Abraham Irawan](https://camo.githubusercontent.com/01304a218435d2dc7d9d79e0598a28d2d41161a97ada67ca986d10b8fe8069d5/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f36303939353639342f39326530653866333336656234613562623864393962393430323437643164312f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d706a36546d3858526470474a634145646e43616b7159534e69536a6f41596a765a65736358376430696330253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Abraham Irawan') [![Al H](https://camo.githubusercontent.com/2940ae9ac9e51292f80903abe5c2fa1859635c0cf8db65220b9cc2552971909e/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3537303734322f34636562333334353361356134373435623433306132313661626139323830662f65794a33496a6f794d4442392f312e6a70673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d77557a734935634f3545767032756b49476453674262764b65596776354c534f514d613642723333527273253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Al H') [![Armin Behjati](https://camo.githubusercontent.com/9dd1426d004086651156a61b86724bb0db062685a051ccb3a2ce421ab3ceddb5/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f39333334383231302f35633635306633326130626334383164383039303064323637343532383737372f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d5070584b39425f6979323838616e6e6c4e644c4f657868695148625466745045446543682d735451324b41253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Armin Behjati') [![Bharat Prabhakar](https://camo.githubusercontent.com/ca278ecbb51e76fa443277f55e7902868885e082f11ce4ca9043ad74018b0667/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3133343132393838302f36383063376531346364316134643161396661636539323166623031306638382f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d764e4b6f6a7636376b724e7178376764704b425831525f73745832546b4d525976526330785a7262593673253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Bharat Prabhakar') [![clement Delangue](https://camo.githubusercontent.com/4bd350ab3856de5fd210ebef6753064966bd2462279c3894ce2988d3202e6632/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f3333313538353433)](https://github.com/ostris/ai-toolkit/blob/main/None 'clement Delangue') [![Cosmosis](https://camo.githubusercontent.com/70a035ed3f572e383521f4cdb265649894272f95501732e80207389b1ce9ef9c/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f3730323138383436)](https://github.com/ostris/ai-toolkit/blob/main/None 'Cosmosis') [![David Garrido](https://camo.githubusercontent.com/c8ff2c47678a2ec2608b46cc796e1158f7cc2636574bf9fd19c3d688536c57e9/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f32373238383933322f36633335643264393631656534653134613761333638633939303739313331352f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d6470464673735a585a4d5f4b5a4d4b51686c3375447777757364467731635f7639785f43684a55375f7a63253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'David Garrido') [![Doron Adler](https://camo.githubusercontent.com/d103374f89aa9110163aa208d9a99c145ef0c6d3be3a0f51e7bf73ca807b6868/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f38323736332f66393963633438343336316434623964393466653466303831346164613330332f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d4270774330323070523354525a3472305253436953494f682d6a6d61746b72707931683258553473476134253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Doron Adler') [![Eli Slugworth](https://camo.githubusercontent.com/3e87c3d4e5e54442dada635551e1ad78ce638f87faad3be80e07e9a9339e7473/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f35343839303336392f34356365613231643832393734633738626634333935366465376662306531322f65794a33496a6f794d4442392f322e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d494b364f543655707573486764614334793849684b3558785869503554754c7933766a76674c373746686f253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Eli Slugworth') [![EmmanuelMr18](https://camo.githubusercontent.com/ba49dd498546303a8dbc66de9b969bca00561411bcd5f904af1926e6eae21d3c/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f39383831313433352f33613336333264313739356234633262396638663032373066326636613635302f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d39337738524d7877586c634d34583734743033753650355f53724b766c6d3149706a6e4432537a56704a6b253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'EmmanuelMr18') [![Gili Ben Shahar](https://camo.githubusercontent.com/c99f0b1aebc9a0772ef5aa7d904385f1285d2b0eb790750875e5f9e2bbe9224a/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f38333035343937302f31336465366362313033616434316135383431656466353439653636636435312f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d77555f456b653956596366493430464151766445563834587370716c6f3556536961664c7168675f464f45253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Gili Ben Shahar') [![HestoySeghuro .](https://camo.githubusercontent.com/637fc5b80c91d46d45788827d5e5ad25320752b801a45ff3c8f59bd1e141c27a/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f33303933313938332f35346162346534636561623934366537396136343138643230356639656435312f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d4c426d7353734d515a684f3679525a5f5979527754674536613742565772474e73415676654c5848585230253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'HestoySeghuro .') [![Jack Blakely](https://camo.githubusercontent.com/e84a64fa5ac0184cca8fa76c77da559e5b7a568fa43cbe56eb5cd31e564e12ae/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f34313035333834)](https://github.com/ostris/ai-toolkit/blob/main/None 'Jack Blakely') [![Jack English](https://camo.githubusercontent.com/18a220995b159e647074f76d14de2ec82a212a921aada77bacdd29f1490524a7/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f34353536323937382f30646533336366353265633634326165386132663631326364646563346361362f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d685341766144347068694c634630707658374650306a7549354e5157436f6e2d5f545a534e704a7a514a67253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Jack English') [![Jason](https://camo.githubusercontent.com/8870f5b4308041cd3d420c5f02bf0af8bfb645aa972d21c1617186be6c54adc7/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3135303235373031332f30653965333333643330323934656566396634643638323131363639363664382f65794a33496a6f794d4442392f322e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d6850485f7270354c354f4a395a4d5331775a667056584442346c527632474870563672384a6d626d717777253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Jason') [![Jean-Tristan Marin](https://camo.githubusercontent.com/20f7d3b28193b7bd07044d6cc38fe2eb2591f89f1fcc17457363f7854378a9b4/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f3237373931363830)](https://github.com/ostris/ai-toolkit/blob/main/None 'Jean-Tristan Marin') [![Jodh Singh](https://camo.githubusercontent.com/76ba06b964d36da7d76c98630be77cff50d05a8d266856cf5d5c666bd97891eb/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3133313737333934372f65646133343035616135383234333764623435383266636539303863383733392f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d5334426830734d71544e6d4a6c6f3375527237636f35645f6b7876426a4954656d445466695f314b724341253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Jodh Singh') [![John Dopamine](https://camo.githubusercontent.com/d5e0cdf8032d530916c2e3098dc3d693929b2cae560d08bda196aa278282cee9/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3130333037373731312f62623231353736316363303034653830626439636563376434626364363336642f65794a33496a6f794d4442392f322e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d7a767442696532397252544b5458764141324b684f492d6c336d534d6b397878722d6d675f436b734c7463253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'John Dopamine') [![Joseph Rocca](https://camo.githubusercontent.com/ae4ab43a64fb9c6ca3c61b96cf8cebec40719f34766575630b6fae0d91f2146b/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f3933333034)](https://github.com/ostris/ai-toolkit/blob/main/None 'Joseph Rocca') [![Kasım Açıkbaş](https://camo.githubusercontent.com/390f729a6f4e424de66ecfbd67c1f8c0843eaf73d11ebc68ace581dcff0d309e/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f33313437313337392f30613838373531336565333134613163383664306236663837393265393739352f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d444a4d5a733372446c533066434d5f61686d39354641626a6c654d5f4c3067734f397141507a7164306e41253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Kasım Açıkbaş') [![Kristjan Retter](https://camo.githubusercontent.com/de91761acfb490905a4ba2773e94f73d4b63f7bf31c2e53ffb35ffea1157f4fe/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3135323131383834382f33623135613433643731373134353532623565643163396638346536366164662f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d49454b453138434248565a336b2d3038554437446b623748626946486238345730464154644c4d49304467253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Kristjan Retter') [![Maciej Popławski](https://camo.githubusercontent.com/b51bfe7c69442757412ddfd91d0a3718c3b73bb0b27dc33a3e4ab957adaebcbd/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f32343435383439352f37643739343132653362393934616535616662336362373830346265383565652f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d574a4667436b7770335f764d64446543784b396b36435373426e454c703755636d45474459674f56303777253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Maciej Popławski') [![Michael Levine](https://camo.githubusercontent.com/810c9c43581ee78d17a5da0352da3b6ce1fc253bf2560069d40d6d8257fb0ba8/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f3232383039363930)](https://github.com/ostris/ai-toolkit/blob/main/None 'Michael Levine') [![Miguel Lara](https://camo.githubusercontent.com/40d0fc2826eeff00a955ccf1cf081471ee8c06143e863717cadf67b6bfd1753c/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f3833333139323330)](https://github.com/ostris/ai-toolkit/blob/main/None 'Miguel Lara') [![Misch Strotz](https://camo.githubusercontent.com/f0bb7d62b7faaa8d0805a728c7c61c00b887790a97b913abff6cbaa830baf493/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f383635343330322f62306635656265646336326134376334623536323232363933653132353465392f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d6c706569634968315f532d334a693357323767796952423769587572703842783848417a444866744f756f253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Misch Strotz') [![Mohamed Oumoumad](https://camo.githubusercontent.com/ccf7cfa9a2a29859553810a0eb1a7dade836329e0508bc80587211822f3b9048/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f323239383139322f31323238623639626437643734383162616633313033333135313833323530642f65794a33496a6f794d4442392f312e6a70673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d314237646258795f67416350543957584265734c6873377a5f394150697a326b31577834566d6c5f2d3851253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Mohamed Oumoumad') [![Noctre](https://camo.githubusercontent.com/d1097267ceb4d89fc5858b4adc7e46f68e324dc98b96d1c2bcbbc94aa0d39549/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f39393033363335362f37616539633464383065363034653733396236386363613132656532656430312f65794a33496a6f794d4442392f332e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d7a4b30644865364139333757744e6c72476465666f58465450507a485543666e5f5f32334850382d556930253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Noctre') [![Patron](https://camo.githubusercontent.com/4560fc70cc6e94d5efb15b820e6c8b9061ad0e4de6f4466dfb5278261ad4d7e0/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f38343439353630)](https://github.com/ostris/ai-toolkit/blob/main/None 'Patron') [![Paul Fidika](https://camo.githubusercontent.com/70d43882056ed1267bc02c7f4e6204443affe9524376ccb3561709b0d09246f8/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f3234343430373839)](https://github.com/ostris/ai-toolkit/blob/main/None 'Paul Fidika') [![Plaidam](https://camo.githubusercontent.com/b10b684569cdcace5e46c720d58f5537f3f3bf318b01b2672ba851820a939978/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3333383535312f65386632353764386433646434366333383237326233393161353738353934382f65794a33496a6f794d4442392f312e6a70673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d474c6f6d317247674f5a6a42654f3749314f6e6a694967576d6a6c36504f395a6a4242385954766337414d253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Plaidam') [![Prasanth Veerina](https://camo.githubusercontent.com/5f9cd9c6f3360d4646a8847ea58f1949ec62c3b81ce7cd90364d80bfb5adbe24/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3136323532343130312f38316137323638396333373534616335623965333836313263653563653931342f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d33584c536c4c46435741512d307764325f765a4d696b796f7464514e537a4b4f6a6f79656f4a695a457730253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Prasanth Veerina') [![Razvan Grigore](https://camo.githubusercontent.com/b784270c227676eab339d50334ef2d9d2cb883e1d708d3a9156ea770bce38872/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3135363338323830322f61353437653161383935323134346261393466333031623130656133376637612f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d34446f656353597751477166364c67595543484b6345694b67327033526a5f33426d656e506b4833454b38253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Razvan Grigore') [![Steve Hanff](https://camo.githubusercontent.com/23e4e6d3fe1e8c7c49ca91a485b763f20db1386ca71ec43d99fd02cda66082f7/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f353438353234)](https://github.com/ostris/ai-toolkit/blob/main/None 'Steve Hanff') [![Steve Informal](https://camo.githubusercontent.com/1468174a3e66df5ca204070ca2809d710b4c85ef5393a0eb4bec7b83ec932e0f/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f36323738333231322f63623731663933386263363534373438623763636538356137303863653061622f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d4d4b43655869524869536244394978397464764d6e37386b52505152545634514a6c374f304f4c4e303945253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Steve Informal') [![Steven Simmons](https://camo.githubusercontent.com/9bc6a4d290112971d58821b976f2f0c060452b96c65828a53d19202a93fb1437/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3136333432363937372f66633339343163373965383934666566393835643966353434303235353331332f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d546a776c6c664b43645f46747431433277465964634f644a5a7879755061527045624b6a72667a6b305a77253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Steven Simmons') [![Sören ](https://camo.githubusercontent.com/e8508e533245b9cd7749a7ac432c39470facfd6770486413b18cff24c75d0557/68747470733a2f2f63382e70617472656f6e2e636f6d2f332f3230302f34353431343233)](https://github.com/ostris/ai-toolkit/blob/main/None 'Sören ') [![The Local Lab](https://camo.githubusercontent.com/53414c85b15e60b77dc3ff3fac3a4490decef0b2616735638a9db5c6b6195f3f/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3134313039383537392f31613966306131323439643434376137613064663731386135373334333931322f65794a33496a6f794d4442392f322e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d52645f416a5a47684d4154566b5a446638453935494c63306e3933677676465765314967305f6478776634253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'The Local Lab') [![Trent Hunter](https://camo.githubusercontent.com/b1af5edbb6d608f68694959df13dd3a2228861e05cfa3f989d1ca0903c87b33d/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f33313935303835372f63353637646336343866363134346265396636323334393436646630356461322f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d335678345231654f664434585f5a50506434304d735a2d336c796b6e4c4d3335586d614852454c6e576a4d253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Trent Hunter') [![Un Defined](https://camo.githubusercontent.com/ca61328f3d24d4ecce60e285f918a2d6daf0a90222634eb1d3051fbb64de833a/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3135353936333235302f36663866643730373563336234323437626665623035346261343931373264362f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d74776d4b73346d4144465f6837624b68356a42756967595653634d656165487632704550696e394b304467253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Un Defined') [![Vladimir Sotnikov](https://camo.githubusercontent.com/efa70da1ea18d064349b0370434ee60afb6061bed20242e8c4e0bf52790ba87f/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3136313437313732302f64643333306234303336643434613539383565643539383563313261356465662f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d716b527672456335674c50786158784c7663766259763157316c636d4f6f5477686a344139437135427851253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Vladimir Sotnikov') [![Wesley Reitzfeld](https://camo.githubusercontent.com/d51d60e5aa457f21dc46c7514bba3175de77739c638f7ca3fdea6de2275e586b/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3131303430373431342f33306639653964383865663934356464623066343766643233613863626163322f65794a33496a6f794d4442392f312e6a7065673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d515152574f6b4d794f6644424552486e344f384e32774d4233327a65694945737964565462534e55772d49253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Wesley Reitzfeld') [![Zoltán-Csaba Nyiró](https://camo.githubusercontent.com/d99860bbd5affc6271592f5343d347d406f9fdcaf54663b11e534988b51f0f84/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f3136323339383639312f38396437386438396565636234643662393831636538633363366133643462382f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d535768492d306a477059364e635f62555165587a34706139445255526939566e6e6e4a334d786a6731706f253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Zoltán-Csaba Nyiró') [![Алексей Наумов](https://camo.githubusercontent.com/d60eef8aadd641bc8c3c49f96cd274e4e27bf214a28f74ffbe8eff3887995492/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f32363031393038322f36626139363831323965323834633836393036396232363163383735616530322f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d4a7a2d4b6b396c38524976474d4e63614758754e385f76615933473433356c466d744a74465a41334f4373253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'Алексей Наумов') [![עומר מכלוף](https://camo.githubusercontent.com/220e8b7c298c0c461ba0a47f6e4d2c6a3d6face34deb837fe7cb6035f97cbe26/68747470733a2f2f6331302e70617472656f6e75736572636f6e74656e742e636f6d2f342f70617472656f6e2d6d656469612f702f757365722f39373938353234302f33643164306536393035643034356162613731336538313332636162346133302f65794a33496a6f794d4442392f312e706e673f746f6b656e2d74696d653d3231343539313638303026746f6b656e2d686173683d70473358326d2d7079326c52594932616f4a69584934375f3441724437385a4864536d366a434148415f77253344)](https://github.com/ostris/ai-toolkit/blob/main/None 'עומר מכלוף')

---

## Installation

Requirements:

- python &gt;3.10
- Nvidia GPU with enough ram to do what you need
- python venv
- git

Linux:

```
git clone https://github.com/ostris/ai-toolkit.git
cd ai-toolkit
git submodule update --init --recursive
python3 -m venv venv
source venv/bin/activate
# .\venv\Scripts\activate on windows
# install torch first
pip3 install torch
pip3 install -r requirements.txt
```

Windows:

```
git clone https://github.com/ostris/ai-toolkit.git
cd ai-toolkit
git submodule update --init --recursive
python -m venv venv
.\venv\Scripts\activate
pip install torch==2.5.1 torchvision==0.20.1 --index-url https://download.pytorch.org/whl/cu124
pip install -r requirements.txt
```

## AI Toolkit UI

[![AI Toolkit UI](https://camo.githubusercontent.com/ea35b399e0d659f9f2ee09cbedb58e1a3ec7a0eab763e8ae8d11d076aad5be40/68747470733a2f2f6f73747269732e636f6d2f77702d636f6e74656e742f75706c6f6164732f323032352f30322f746f6f6c6b69742d75692e6a7067)](https://camo.githubusercontent.com/ea35b399e0d659f9f2ee09cbedb58e1a3ec7a0eab763e8ae8d11d076aad5be40/68747470733a2f2f6f73747269732e636f6d2f77702d636f6e74656e742f75706c6f6164732f323032352f30322f746f6f6c6b69742d75692e6a7067)

The AI Toolkit UI is a web interface for the AI Toolkit. It allows you to easily start, stop, and monitor jobs. It also allows you to easily train models with a few clicks. It is still in early beta and will likely have bugs and frequent breaking changes. It is currently only tested on linux for now.

WARNING: The UI is not secure and should not be exposed to the internet. It is only meant to be run locally or on a server that does not have ports exposed. Adding additional security is on the roadmap.

## Installing the UI

Requirements:

- Node.js &gt; 18

You will need to do this with every update as well.

```
cd ui
npm install
npm run build
npm run update_db
```

## Running the UI

Make sure you built it as shown above. The UI does not need to be kept running for the jobs to run. It is only needed to start/stop/monitor jobs.

```
cd ui
npm run start
```

You can now access the UI at `http://localhost:8675` or `http://&lt;your-ip&gt;:8675` if you are running it on a server.

## FLUX.1 Training

### Tutorial

To get started quickly, check out [@araminta\_k](https://x.com/araminta_k) tutorial on [Finetuning Flux Dev on a 3090](https://www.youtube.com/watch?v=HzGW_Kyermg) with 24GB VRAM.

### Requirements

You currently need a GPU with **at least 24GB of VRAM** to train FLUX.1. If you are using it as your GPU to control your monitors, you probably need to set the flag `low_vram: true` in the config file under `model:`. This will quantize the model on CPU and should allow it to train with monitors attached. Users have gotten it to work on Windows with WSL, but there are some reports of a bug when running on windows natively. I have only tested on linux for now. This is still extremely experimental and a lot of quantizing and tricks had to happen to get it to fit on 24GB at all.

### FLUX.1-dev

FLUX.1-dev has a non-commercial license. Which means anything you train will inherit the non-commercial license. It is also a gated model, so you need to accept the license on HF before using it. Otherwise, this will fail. Here are the required steps to setup a license.

1. Sign into HF and accept the model access here [black-forest-labs/FLUX.1-dev](https://huggingface.co/black-forest-labs/FLUX.1-dev)
2. Make a file named `.env` in the root on this folder
3. [Get a READ key from huggingface](https://huggingface.co/settings/tokens/new?) and add it to the `.env` file like so `HF_TOKEN=your_key_here`

### FLUX.1-schnell

FLUX.1-schnell is Apache 2.0. Anything trained on it can be licensed however you want and it does not require a HF\_TOKEN to train. However, it does require a special adapter to train with it, [ostris/FLUX.1-schnell-training-adapter](https://huggingface.co/ostris/FLUX.1-schnell-training-adapter). It is also highly experimental. For best overall quality, training on FLUX.1-dev is recommended.

To use it, You just need to add the assistant to the `model` section of your config file like so:

```
      model:
        name_or_path: 'black-forest-labs/FLUX.1-schnell'
        assistant_lora_path: 'ostris/FLUX.1-schnell-training-adapter'
        is_flux: true
        quantize: true
```

You also need to adjust your sample steps since schnell does not require as many

```
      sample:
        guidance_scale: 1  # schnell does not do guidance
        sample_steps: 4  # 1 - 4 works well
```

### Training

1. Copy the example config file located at `config/examples/train_lora_flux_24gb.yaml` (`config/examples/train_lora_flux_schnell_24gb.yaml` for schnell) to the `config` folder and rename it to `whatever_you_want.yml`
2. Edit the file following the comments in the file
3. Run the file like so `python run.py config/whatever_you_want.yml`

A folder with the name and the training folder from the config file will be created when you start. It will have all checkpoints and images in it. You can stop the training at any time using ctrl+c and when you resume, it will pick back up from the last checkpoint.

IMPORTANT. If you press crtl+c while it is saving, it will likely corrupt that checkpoint. So wait until it is done saving

### Need help?

Please do not open a bug report unless it is a bug in the code. You are welcome to [Join my Discord](https://discord.gg/VXmU2f5WEU) and ask for help there. However, please refrain from PMing me directly with general question or support. Ask in the discord and I will answer when I can.

## Gradio UI

To get started training locally with a with a custom UI, once you followed the steps above and `ai-toolkit` is installed:

```
cd ai-toolkit #in case you are not yet in the ai-toolkit folder
huggingface-cli login #provide a \`write\` token to publish your LoRA at the end
python flux_train_ui.py
```

You will instantiate a UI that will let you upload your images, caption them, train and publish your LoRA [![image](https://github.com/ostris/ai-toolkit/raw/main/assets/lora_ease_ui.png)](https://github.com/ostris/ai-toolkit/blob/main/assets/lora_ease_ui.png)

## Training in RunPod

Example RunPod template: **runpod/pytorch:2.2.0-py3.10-cuda12.1.1-devel-ubuntu22.04**

&gt; You need a minimum of 24GB VRAM, pick a GPU by your preference.

#### Example config ($0.5/hr):

- 1x A40 (48 GB VRAM)
- 19 vCPU 100 GB RAM

#### Custom overrides (you need some storage to clone FLUX.1, store datasets, store trained models and samples):

- ~120 GB Disk
- ~120 GB Pod Volume
- Start Jupyter Notebook

### 1\. Setup

```
git clone https://github.com/ostris/ai-toolkit.git
cd ai-toolkit
git submodule update --init --recursive
python -m venv venv
source venv/bin/activate
pip install torch
pip install -r requirements.txt
pip install --upgrade accelerate transformers diffusers huggingface_hub #Optional, run it if you run into issues
```

### 2\. Upload your dataset

- Create a new folder in the root, name it `dataset` or whatever you like.
- Drag and drop your .jpg, .jpeg, or .png images and .txt files inside the newly created dataset folder.

### 3\. Login into Hugging Face with an Access Token

- Get a READ token from [here](https://huggingface.co/settings/tokens) and request access to Flux.1-dev model from [here](https://huggingface.co/black-forest-labs/FLUX.1-dev).
- Run `huggingface-cli login` and paste your token.

### 4\. Training

- Copy an example config file located at `config/examples` to the config folder and rename it to `whatever_you_want.yml`.
- Edit the config following the comments in the file.
- Change `folder_path: '/path/to/images/folder'` to your dataset path like `folder_path: '/workspace/ai-toolkit/your-dataset'`.
- Run the file: `python run.py config/whatever_you_want.yml`.

### Screenshot from RunPod

[![RunPod Training Screenshot](https://private-user-images.githubusercontent.com/101264514/358849579-53a1b8ef-92fa-4481-81a7-bde45a14a7b5.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDE2MDU3NzUsIm5iZiI6MTc0MTYwNTQ3NSwicGF0aCI6Ii8xMDEyNjQ1MTQvMzU4ODQ5NTc5LTUzYTFiOGVmLTkyZmEtNDQ4MS04MWE3LWJkZTQ1YTE0YTdiNS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMzEwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDMxMFQxMTE3NTVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT04ZWQzNGJlNTY5YTVmZDg0OGZiYmUwYzg2NjVhZDViM2RmNGU2NGUzMjY0ZDA3MmM2ZmZiZDE0MDEzYTE0YmRmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.D-qN_uU5citkDFrTyazA2sifVlurocNZbzI-7YTCaks)](https://private-user-images.githubusercontent.com/101264514/358849579-53a1b8ef-92fa-4481-81a7-bde45a14a7b5.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDE2MDU3NzUsIm5iZiI6MTc0MTYwNTQ3NSwicGF0aCI6Ii8xMDEyNjQ1MTQvMzU4ODQ5NTc5LTUzYTFiOGVmLTkyZmEtNDQ4MS04MWE3LWJkZTQ1YTE0YTdiNS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMzEwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDMxMFQxMTE3NTVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT04ZWQzNGJlNTY5YTVmZDg0OGZiYmUwYzg2NjVhZDViM2RmNGU2NGUzMjY0ZDA3MmM2ZmZiZDE0MDEzYTE0YmRmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.D-qN_uU5citkDFrTyazA2sifVlurocNZbzI-7YTCaks)

## Training in Modal

### 1\. Setup

#### ai-toolkit:

```
git clone https://github.com/ostris/ai-toolkit.git
cd ai-toolkit
git submodule update --init --recursive
python -m venv venv
source venv/bin/activate
pip install torch
pip install -r requirements.txt
pip install --upgrade accelerate transformers diffusers huggingface_hub #Optional, run it if you run into issues
```

#### Modal:

- Run `pip install modal` to install the modal Python package.
- Run `modal setup` to authenticate (if this doesn’t work, try `python -m modal setup`).

#### Hugging Face:

- Get a READ token from [here](https://huggingface.co/settings/tokens) and request access to Flux.1-dev model from [here](https://huggingface.co/black-forest-labs/FLUX.1-dev).
- Run `huggingface-cli login` and paste your token.

### 2\. Upload your dataset

- Drag and drop your dataset folder containing the .jpg, .jpeg, or .png images and .txt files in `ai-toolkit`.

### 3\. Configs

- Copy an example config file located at `config/examples/modal` to the `config` folder and rename it to `whatever_you_want.yml`.
- Edit the config following the comments in the file, **be careful and follow the example `/root/ai-toolkit` paths**.

### 4\. Edit run\_modal.py

- Set your entire local `ai-toolkit` path at `code_mount = modal.Mount.from_local_dir` like:

```
code_mount = modal.Mount.from_local_dir('/Users/username/ai-toolkit', remote_path='/root/ai-toolkit')
```
- Choose a `GPU` and `Timeout` in `@app.function` *(default is A100 40GB and 2 hour timeout)*.

### 5\. Training

- Run the config file in your terminal: `modal run run_modal.py --config-file-list-str=/root/ai-toolkit/config/whatever_you_want.yml`.
- You can monitor your training in your local terminal, or on [modal.com](https://modal.com/).
- Models, samples and optimizer will be stored in `Storage &gt; flux-lora-models`.

### 6\. Saving the model

- Check contents of the volume by running `modal volume ls flux-lora-models`.
- Download the content by running `modal volume get flux-lora-models your-model-name`.
- Example: `modal volume get flux-lora-models my_first_flux_lora_v1`.

### Screenshot from Modal

[![Modal Traning Screenshot](https://private-user-images.githubusercontent.com/101264514/360713889-7497eb38-0090-49d6-8ad9-9c8ea7b5388b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDE2MDU3NzUsIm5iZiI6MTc0MTYwNTQ3NSwicGF0aCI6Ii8xMDEyNjQ1MTQvMzYwNzEzODg5LTc0OTdlYjM4LTAwOTAtNDlkNi04YWQ5LTljOGVhN2I1Mzg4Yi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMzEwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDMxMFQxMTE3NTVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT03YjNiYTZkNzQ2OGY5MDk3NGE3NGUyMmYzZGZlNTM2MmM5YzMyM2YzMWQ5MjA3ZTUxZmFlMWUyZTZkZmJlNTdlJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.QDJuhwX_i6btxzYE14HQKw1BqMe4FpqkbT_ppH_C1io)](https://private-user-images.githubusercontent.com/101264514/360713889-7497eb38-0090-49d6-8ad9-9c8ea7b5388b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDE2MDU3NzUsIm5iZiI6MTc0MTYwNTQ3NSwicGF0aCI6Ii8xMDEyNjQ1MTQvMzYwNzEzODg5LTc0OTdlYjM4LTAwOTAtNDlkNi04YWQ5LTljOGVhN2I1Mzg4Yi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMzEwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDMxMFQxMTE3NTVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT03YjNiYTZkNzQ2OGY5MDk3NGE3NGUyMmYzZGZlNTM2MmM5YzMyM2YzMWQ5MjA3ZTUxZmFlMWUyZTZkZmJlNTdlJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.QDJuhwX_i6btxzYE14HQKw1BqMe4FpqkbT_ppH_C1io)

---

## Dataset Preparation

Datasets generally need to be a folder containing images and associated text files. Currently, the only supported formats are jpg, jpeg, and png. Webp currently has issues. The text files should be named the same as the images but with a `.txt` extension. For example `image2.jpg` and `image2.txt`. The text file should contain only the caption. You can add the word `[trigger]` in the caption file and if you have `trigger_word` in your config, it will be automatically replaced.

Images are never upscaled but they are downscaled and placed in buckets for batching. **You do not need to crop/resize your images**. The loader will automatically resize them and can handle varying aspect ratios.

## Training Specific Layers

To train specific layers with LoRA, you can use the `only_if_contains` network kwargs. For instance, if you want to train only the 2 layers used by The Last Ben, [mentioned in this post](https://x.com/__TheBen/status/1829554120270987740), you can adjust your network kwargs like so:

```
      network:
        type: 'lora'
        linear: 128
        linear_alpha: 128
        network_kwargs:
          only_if_contains:
            - 'transformer.single_transformer_blocks.7.proj_out'
            - 'transformer.single_transformer_blocks.20.proj_out'
```

The naming conventions of the layers are in diffusers format, so checking the state dict of a model will reveal the suffix of the name of the layers you want to train. You can also use this method to only train specific groups of weights. For instance to only train the `single_transformer` for FLUX.1, you can use the following:

```
      network:
        type: 'lora'
        linear: 128
        linear_alpha: 128
        network_kwargs:
          only_if_contains:
            - 'transformer.single_transformer_blocks.'
```

You can also exclude layers by their names by using `ignore_if_contains` network kwarg. So to exclude all the single transformer blocks,

```
      network:
        type: 'lora'
        linear: 128
        linear_alpha: 128
        network_kwargs:
          ignore_if_contains:
            - 'transformer.single_transformer_blocks.'
```

`ignore_if_contains` takes priority over `only_if_contains`. So if a weight is covered by both, if will be ignored.

## LoKr Training

To learn more about LoKr, read more about it at [KohakuBlueleaf/LyCORIS](https://github.com/KohakuBlueleaf/LyCORIS/blob/main/docs/Guidelines.md). To train a LoKr model, you can adjust the network type in the config file like so:

```
      network:
        type: 'lokr'
        lokr_full_rank: true
        lokr_factor: 8
```

Everything else should work the same including layer targeting.。</description><guid isPermaLink="true">https://winnerineast.github.io/post/ai-toolkit%20Various%20AI%20scripts.%20Mostly%20Stable%20Diffusion%20stuff.html</guid><pubDate>Sat, 12 Jul 2025 12:18:51 +0000</pubDate></item><item><title>AI 时代下的工程领导力：如何打造高效团队 - 来自谷歌工程负责人、Chrome 开发者的宝贵经验分享</title><link>https://winnerineast.github.io/post/AI%20-shi-dai-xia-de-gong-cheng-ling-dao-li-%EF%BC%9A-ru-he-da-zao-gao-xiao-tuan-dui-%20-%20-lai-zi-gu-ge-gong-cheng-fu-ze-ren-%E3%80%81Chrome%20-kai-fa-zhe-de-bao-gui-jing-yan-fen-xiang.html</link><description>Original 邵猛 *2025年03月25日 19:32*

今天偶然读到 Chrome 开发者、Google 工程负责人、著名技术书籍作者 - Addy Osmani 的一篇文章 「 Leading Effective Engineering Teams in the Age of GenAI」 ，讲的特别好，对于产品和研发方向如何变得高效，不管你是团队领导者、还是团队成员，都很有价值，分享给朋友们，可以先看我的阅读笔记，针对自己感兴趣的部门再阅读原文（推荐阅读，作者信息和文章链接放在文末）

![Image](https://mmbiz.qpic.cn/mmbiz_png/5CmZha6ohm38sDnEfwzjLtq29sCwghGUjmFhN5danpeEvVtb5WDldZDnQ2ycAe4FIymxLYyBbQyQfk54eflBDA/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1)

&gt; 文章的核心观点是：在生成式 AI 时代，领导一个工程团队不是为了让代码写得更快，而是要让软件做得更好。</description><guid isPermaLink="true">https://winnerineast.github.io/post/AI%20-shi-dai-xia-de-gong-cheng-ling-dao-li-%EF%BC%9A-ru-he-da-zao-gao-xiao-tuan-dui-%20-%20-lai-zi-gu-ge-gong-cheng-fu-ze-ren-%E3%80%81Chrome%20-kai-fa-zhe-de-bao-gui-jing-yan-fen-xiang.html</guid><pubDate>Sat, 12 Jul 2025 12:18:26 +0000</pubDate></item><item><title>Absolute Zero Reinforced Self-play Reasoning with Zero Data</title><link>https://winnerineast.github.io/post/Absolute%20Zero%20Reinforced%20Self-play%20Reasoning%20with%20Zero%20Data.html</link><description>「Reasoning, RLVR」论文

Absolute Zero: Reinforced Self-play Reasoning with Zero Data

Paper of the week!

亮点：AZR 完全不依赖人类标注数据，通过自博弈实现推理能力进化。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Absolute%20Zero%20Reinforced%20Self-play%20Reasoning%20with%20Zero%20Data.html</guid><pubDate>Sat, 12 Jul 2025 12:18:05 +0000</pubDate></item><item><title>深度解密现代 AI Agent：六大核心组件的构建与实践指南</title><link>https://winnerineast.github.io/post/shen-du-jie-mi-xian-dai-%20AI%20Agent%EF%BC%9A-liu-da-he-xin-zu-jian-de-gou-jian-yu-shi-jian-zhi-nan.html</link><description>引言：AI Agent 的演进

AI Agent 系统的发展历程，展现了 AI 领域从简单到复杂、从特定到通用的技术演进过程。</description><guid isPermaLink="true">https://winnerineast.github.io/post/shen-du-jie-mi-xian-dai-%20AI%20Agent%EF%BC%9A-liu-da-he-xin-zu-jian-de-gou-jian-yu-shi-jian-zhi-nan.html</guid><pubDate>Sat, 12 Jul 2025 12:17:29 +0000</pubDate></item><item><title>大模型RAG的下一形态，MAG （Pending on more progress from GitHub - noted on 7Sep24)</title><link>https://winnerineast.github.io/post/da-mo-xing-RAG-de-xia-yi-xing-tai-%EF%BC%8CMAG%20%EF%BC%88Pending%20on%20more%20progress%20from%20GitHub%20-%20noted%20on%207Sep24%29.html</link><description>论文笔记分享，
标题MemLong: Memory-Augmented Retrieval for Long Text Modeling ![[2408.16967v1.pdf]]
代码开源：https://github.com/Bui1dMySea/MemLong

LLMs在处理长文本时，因为注意力机制二次时间和空间复杂度的问题，所以处理长文本时的内存消耗和计算成本有点恐怖。</description><guid isPermaLink="true">https://winnerineast.github.io/post/da-mo-xing-RAG-de-xia-yi-xing-tai-%EF%BC%8CMAG%20%EF%BC%88Pending%20on%20more%20progress%20from%20GitHub%20-%20noted%20on%207Sep24%29.html</guid><pubDate>Sat, 12 Jul 2025 12:17:13 +0000</pubDate></item><item><title>大一统2.0！CNN, RNN, GNN和Transformer模型的统一表示和泛化误差理论分析</title><link>https://winnerineast.github.io/post/da-yi-tong-2.0%EF%BC%81CNN%2C%20RNN%2C%20GNN-he-Transformer-mo-xing-de-tong-yi-biao-shi-he-fan-hua-wu-cha-li-lun-fen-xi.html</link><description>
Original 让你更懂AI的 PaperWeekly

 _2024年11月29日 22:37_

![Image](https://mmbiz.qpic.cn/mmbiz_gif/Psho9dm7oDHKVtfYDubjKdZRUjAfBQQicXjoZWJ3qnK42ooD4eeJUfJBM4SSZVa2RE5lO0j6rWwzliby0j9u4bDg/640?wx_fmt=gif&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1)

![Image](https://mmbiz.qpic.cn/mmbiz_png/Psho9dm7oDEpFIiarozsxcDrKF6ib5G4gvAXKjq7NY1gVRh2S7gokhal1S23ibxkic9LYeQLwQ6AjZOx1jUKNPaFUw/640?wx_fmt=png&amp;from=appmsg&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1)

**论文标题：**

RPN 2: On Interdependence Function Learning Towards Unifying and Advancing CNN, RNN, GNN, and Transformer

**论文链接：**

https://arxiv.org/abs/2411.11162

**官方网站：**

https://www.tinybig.org/

**代码链接：**

https://github.com/jwzhanggy/tinyBIG

**PyPI Package:**

https://pypi.org/project/tinybig/

  

  

![Image](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)

**背景介绍**

![Image](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)

本文是基于我们之前的 [RPN（Reconciled Polynomial Network）](https://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;mid=2247674123&amp;idx=1&amp;sn=1e17a56a803e6a7be051ebd04c5bf526&amp;token=1293808530&amp;lang=zh_CN&amp;scene=21#wechat_redirect)研究的后续工作。</description><guid isPermaLink="true">https://winnerineast.github.io/post/da-yi-tong-2.0%EF%BC%81CNN%2C%20RNN%2C%20GNN-he-Transformer-mo-xing-de-tong-yi-biao-shi-he-fan-hua-wu-cha-li-lun-fen-xi.html</guid><pubDate>Sat, 12 Jul 2025 12:16:55 +0000</pubDate></item><item><title>一个全面、先进、公平且模块化的开源RAG框架</title><link>https://winnerineast.github.io/post/yi-ge-quan-mian-%E3%80%81-xian-jin-%E3%80%81-gong-ping-qie-mo-kuai-hua-de-kai-yuan-RAG-kuang-jia.html</link><description>
两个关键问题限制了 RAG 的发展：

- 新型 RAG 算法之间缺乏**全面和公平**的比较。</description><guid isPermaLink="true">https://winnerineast.github.io/post/yi-ge-quan-mian-%E3%80%81-xian-jin-%E3%80%81-gong-ping-qie-mo-kuai-hua-de-kai-yuan-RAG-kuang-jia.html</guid><pubDate>Sat, 12 Jul 2025 12:16:38 +0000</pubDate></item><item><title>OpenCoder：首个完全开源的顶级代码大模型，训练秘籍全公开，LLM×MapReduce，无需训练就超越GPT-4</title><link>https://winnerineast.github.io/post/OpenCoder%EF%BC%9A-shou-ge-wan-quan-kai-yuan-de-ding-ji-dai-ma-da-mo-xing-%EF%BC%8C-xun-lian-mi-ji-quan-gong-kai-%EF%BC%8CLLM%C3%97MapReduce%EF%BC%8C-wu-xu-xun-lian-jiu-chao-yue-GPT-4.html</link><description>大模型领域的发展日新月异，每天都有许多有趣的论文值得深入品读。</description><guid isPermaLink="true">https://winnerineast.github.io/post/OpenCoder%EF%BC%9A-shou-ge-wan-quan-kai-yuan-de-ding-ji-dai-ma-da-mo-xing-%EF%BC%8C-xun-lian-mi-ji-quan-gong-kai-%EF%BC%8CLLM%C3%97MapReduce%EF%BC%8C-wu-xu-xun-lian-jiu-chao-yue-GPT-4.html</guid><pubDate>Sat, 12 Jul 2025 12:16:21 +0000</pubDate></item><item><title>MiniMind：已开源！只要3小时就能训练一个26M的大模型，教程非常清晰我感觉我又行了！</title><link>https://winnerineast.github.io/post/MiniMind%EF%BC%9A-yi-kai-yuan-%EF%BC%81-zhi-yao-3-xiao-shi-jiu-neng-xun-lian-yi-ge-26M-de-da-mo-xing-%EF%BC%8C-jiao-cheng-fei-chang-qing-xi-wo-gan-jue-wo-you-xing-le-%EF%BC%81.html</link><description>很多人都觉得训练大模型是个很难的事情，包括大部分的程序员自己也搞不出来。</description><guid isPermaLink="true">https://winnerineast.github.io/post/MiniMind%EF%BC%9A-yi-kai-yuan-%EF%BC%81-zhi-yao-3-xiao-shi-jiu-neng-xun-lian-yi-ge-26M-de-da-mo-xing-%EF%BC%8C-jiao-cheng-fei-chang-qing-xi-wo-gan-jue-wo-you-xing-le-%EF%BC%81.html</guid><pubDate>Sat, 12 Jul 2025 12:15:48 +0000</pubDate></item><item><title>kotaemon核心GraphRAG、Agent、多模态代码解读！</title><link>https://winnerineast.github.io/post/kotaemon-he-xin-GraphRAG%E3%80%81Agent%E3%80%81-duo-mo-tai-dai-ma-jie-du-%EF%BC%81.html</link><description>要说最近RAG方面火热的项目当属**kotaemon**，短时间暴涨8k star

[一个开源、清晰、强大且可定制的RAG UI](http://mp.weixin.qq.com/s?__biz=Mzk0MTYzMzMxMA==&amp;mid=2247489169&amp;idx=1&amp;sn=c3defd706d2b427bf74d0f8b6af2d048&amp;chksm=c2ce2ce0f5b9a5f6116e8e7d5b04b4cbb4b2a996e1e31adbd655511cedc892b21ae26a0d1727&amp;scene=21#wechat_redirect)  

![图片](https://mmbiz.qpic.cn/sz_mmbiz_png/AE74ia62XricGhdXs2gM0uttZzFDZFWhsp650npa8BbyQ3fHQmUaIBLZ3RuXrxpicL2ic9elt2OQPwbqxPMovQjtnQ/640?wx_fmt=png&amp;from=appmsg&amp;wxfrom=13)

**kotaemon**的亮点是可定制化**RAG UI**，核心技术点是混合索引（Vector、Keyword、**GraphRAG**）、复杂推理**Agent**（ReAct、ReWOO、MemoryGIST 和 GraphReader）、**多模态**。</description><guid isPermaLink="true">https://winnerineast.github.io/post/kotaemon-he-xin-GraphRAG%E3%80%81Agent%E3%80%81-duo-mo-tai-dai-ma-jie-du-%EF%BC%81.html</guid><pubDate>Sat, 12 Jul 2025 12:15:12 +0000</pubDate></item><item><title>DeepSearcher开源：告别传统RAG，私有数据+Deepseek，打造本地版Deep Research</title><link>https://winnerineast.github.io/post/DeepSearcher-kai-yuan-%EF%BC%9A-gao-bie-chuan-tong-RAG%EF%BC%8C-si-you-shu-ju-%2BDeepseek%EF%BC%8C-da-zao-ben-di-ban-Deep%20Research.html</link><description>
原创 和你一起进步的 Zilliz

 _2025年02月13日 19:06_

![图片](https://mmbiz.qpic.cn/mmbiz_png/MqgA8Ylgeh69MGal1BGtDcKwvTTfp5d0DHtYLLGMqYNKG5qwPU0VWeyZibj6YxULOqb3M2heiaUflhftAyLmniciag/640?wx_fmt=other&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1&amp;tp=wxpic)

![图片](https://mmbiz.qpic.cn/mmbiz_jpg/MqgA8Ylgeh5IGBMTYqBrAcxy5ZYQ8PyPustqwVcWc7JZ44y2ibSqYia0apqCylI22ia3goM9kmP8CHvwef4CgOLicw/640?wx_fmt=jpeg&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1)

# **前言**

近日，Open AI的Deep Research（深度研究）功能一经推出，迅速受到诸多关注，通过将大模型+超级搜索+研究助理的三合一，金融机构一键生成报告、科研党一键生成综述成为可能。</description><guid isPermaLink="true">https://winnerineast.github.io/post/DeepSearcher-kai-yuan-%EF%BC%9A-gao-bie-chuan-tong-RAG%EF%BC%8C-si-you-shu-ju-%2BDeepseek%EF%BC%8C-da-zao-ben-di-ban-Deep%20Research.html</guid><pubDate>Sat, 12 Jul 2025 12:14:48 +0000</pubDate></item><item><title>2024年 AI Agents 技术栈全面解析</title><link>https://winnerineast.github.io/post/2024-nian-%20AI%20Agents%20-ji-shu-zhan-quan-mian-jie-xi.html</link><description>Heisenberg 人工世界Artificial World

![profile_qrcode](https://mp.weixin.qq.com/mp/qrcode?scene=10000005&amp;size=102&amp;__biz=MzkxMjY3MDMxMQ==&amp;mid=2247484600&amp;idx=1&amp;sn=d24556d20e9dd8878b0239ce98741f0f&amp;send_time=)

人工世界Artificial World

揭示隐藏变量，处于AGI的边缘。</description><guid isPermaLink="true">https://winnerineast.github.io/post/2024-nian-%20AI%20Agents%20-ji-shu-zhan-quan-mian-jie-xi.html</guid><pubDate>Sat, 12 Jul 2025 12:14:11 +0000</pubDate></item><item><title>统治软件开发的著名定律</title><link>https://winnerineast.github.io/post/tong-zhi-ruan-jian-kai-fa-de-zhu-ming-ding-lv.html</link><description>
原文：https://www.timsommer.be/famous-laws-of-software-development/

翻译| 码农翻身

和其他领域一样，在软件开发的世界中也有一些有趣而著名的定律，开发人员、管理人员还是架构师，都经常在会议或闲谈中提到他们，很多时候我们都只是点头附和，免得让人知道自己其实根本没听说过布鲁克斯(Brooks)、摩尔(Moore)或康威(Conway)这些大佬。</description><guid isPermaLink="true">https://winnerineast.github.io/post/tong-zhi-ruan-jian-kai-fa-de-zhu-ming-ding-lv.html</guid><pubDate>Sat, 12 Jul 2025 12:13:45 +0000</pubDate></item><item><title>Mitigating LLM Hallucinations - a multifaceted approach</title><link>https://winnerineast.github.io/post/Mitigating%20LLM%20Hallucinations%20-%20a%20multifaceted%20approach.html</link><description>
(I recently turned this guide into a paper. You can find it [here](https://amatria.in/blog/hallucination-paper))

- [Introduction](https://amatria.in/blog/hallucinations#introduction)
- [What we talk about when we talk about Hallucinations](https://amatria.in/blog/hallucinations#definition)
- [How to Measure](https://amatria.in/blog/hallucinations#measurement)
- [Mitigating Hallucinations: a multifacted approach](https://amatria.in/blog/hallucinations#mitigation)
    - [Product design approaches](https://amatria.in/blog/hallucinations#product)
    - [Prompt Engineering solutions](https://amatria.in/blog/hallucinations#promptengineering)
    - [Grounding with RAG](https://amatria.in/blog/hallucinations#rag)
    - [Advanced Prompt Engineering methods](https://amatria.in/blog/hallucinations#advancedprompting)
    - [Model Choices](https://amatria.in/blog/hallucinations#modeling)
    - [Reinforcement Learning from Human Feedback (RLHF)](https://amatria.in/blog/hallucinations#rlhf)
    - [Domain adaptation through Fine-Tuning](https://amatria.in/blog/hallucinations#finetuning)
- [Conclusion: Yann vs. Ilya](https://amatria.in/blog/hallucinations#conclusion)

# Introduction[Permalink](https://amatria.in/blog/hallucinations#introduction 'Permalink')

Ever been curious about the complexities of integrating large language models (LLMs) into user-facing products? One challenge that has been gaining attention is the occurrence of ‘hallucinations’—situations where these advanced AI systems produce misleading or incorrect information. This is a real-world issue that many of us in the tech industry are actively working to address as we develop new features and services.

In this blog post, you’ll find a comprehensive guide to the most effective strategies for mitigating these hallucinations in user-facing products. The field is fast-evolving, so while I don’t plan on continuously updating this post, I hope it serves as a valuable snapshot of current best practices. I’m also open to your insights and ideas, so feel free to reach out with any suggestions or questions you might have.

![](https://amatria.in/blog/images/106-0.png) _A multifaceted approach to mitigating LLM hallucinations_

# What we talk about when we talk about hallucinations[Permalink](https://amatria.in/blog/hallucinations#what-we-talk-about-when-we-talk-about-hallucinations 'Permalink')

In the context of Large Language Models (LLMs), the term “hallucinations” often surfaces. As defined by the “Survey of Hallucination in Natural Language Generation” paper, a hallucination in an LLM refers to “the generation of content that is nonsensical or unfaithful to the provided source.”

## A Controversial Term: Unpacking the Use of “Hallucination” in AI[Permalink](https://amatria.in/blog/hallucinations#a-controversial-term-unpacking-the-use-of-hallucination-in-ai 'Permalink')

According to [Wikipedia](https://en.wikipedia.org/wiki/Hallucination), a hallucination is defined as “a perception in the absence of an external stimulus that has the qualities of a real perception.” Such a description might evoke images of mysterious visions or imagined sounds. However, the term has taken on a different, though not uncontroversial, shade of meaning in the realm of artificial intelligence.

There are three main concerns I’ve come across regarding the use of “hallucination” to describe phenomena in AI systems:

- **Misattribution of Properties:** The application of “hallucination” might inadvertently suggest that LLMs possess some form of consciousness or perception, which they certainly don’t. LLMs generate text based on patterns in their training data, not because they “perceive” or “imagine” in the way living creatures do.
- **Misunderstanding of Dynamics:** Such terminology might cloud understanding about how LLMs function. They don’t “see” or “imagine.” Instead, they churn out text based on statistical patterns from their training data.
- **Ethical Implications:** There’s a fear that describing AI outputs as “hallucinations” trivializes the potential risks of LLMs providing incorrect or misleading information, especially if users over-rely on these models without proper fact-checking.

However, the AI context for “hallucination” has even been acknowledged by dictionaries. For instance, [Merriam-Webster](https://www.merriam-webster.com/dictionary/hallucination) defines it in the context of AI as “a plausible but false or misleading response generated by an artificial intelligence algorithm.”

Interestingly, this term isn’t freshly minted. Andrej Karpathy [suggested](https://twitter.com/karpathy/status/1702916988891193460) that he might have popularized the term in his enlightening [blog post](https://karpathy.github.io/2015/05/21/rnn-effectiveness/) from 2015. But a little digging reveals earlier uses. Notably, an [ACL conference paper](https://aclanthology.org/W14-1617.pdf) from 2014 discussed “hallucinating” translations. Even further back, a 2009 paper titled [“Review Sentiment Scoring via a Parse-and-Paraphrase Paradigm”](https://aclanthology.org/D09-1017.pdf) used the term in the context of “hallucinating” topics. But perhaps the most ancient reference I found was in a 1996 paper, [“Text Databases and Information Retrieval”](https://dl.acm.org/doi/pdf/10.1145/234313.234371), which talked about systems that could “hallucinate” words not present in the original document.

In my view, it’s clear that “hallucination” in AI has been in the lexicon for some time, carving out a niche meaning, distinct from its psychological roots.

It’s also worth noting that AI is replete with terms borrowed from human analogies - take “neural networks” for instance. Despite initial reservations, these terms have become integral, largely uncontroversial components of AI discourse.

## Types of Hallucinations[Permalink](https://amatria.in/blog/hallucinations#types-of-hallucinations 'Permalink')

Hallucinations can be categorized into two main types:

- **Intrinsic Hallucinations:** These directly contradict the source material, introducing factual inaccuracies or logical inconsistencies.
- **Extrinsic Hallucinations:** These do not contradict but also cannot be verified against the source, adding elements that could be considered speculative or unconfirmable.

## The Nuanced Role of the ‘Source’[Permalink](https://amatria.in/blog/hallucinations#the-nuanced-role-of-the-source 'Permalink')

The concept of a ‘source’ varies depending on the specific task an LLM is performing. In dialogue-based tasks, the source can be considered as ‘world knowledge.’ However, when the task involves text summarization, the source is the input text itself. This is a critical nuance that significantly impacts both the evaluation and interpretation of hallucinations.

## Contextual Importance of Hallucinations[Permalink](https://amatria.in/blog/hallucinations#contextual-importance-of-hallucinations 'Permalink')

The implications of hallucinations are highly context-dependent. For example, in creative applications such as poem-writing, the presence of hallucinations may not only be acceptable but could potentially enrich the output.

## Why do LLMs hallucinate[Permalink](https://amatria.in/blog/hallucinations#why-do-llms-hallucinate 'Permalink')

It is important to first keep in mind that LLMs have been pre-trained to predict tokens. They do not have a notion of true/false or correct/incorrect, but rather base their text generation on probabilities. While that leads to some unexpected reasoning abilities (such as being able to pass the legal BAR exam or the medical USMLE), that is only a result of this probabilistic token by token reasoning. To be fair, the additional training steps of instruct tuning and RLHF that most modern LLMs have do introduce a bit more “bias towards factuality”, but they do not change the overal underlying mechanism and its pitfalls.

LLMs have been trained on the whole internet, book collections, question/answers, and Wikipedia, among many others. They have good and not-so-good knowledge in their training set. Their responses are biased towards whatever they have seen the most. If you ask an LLM a medical question and you are not careful on how you prompt it, you might get an answer that is mostly aligned to the best medical literature or to random Reddit threads.

In a recent paper entitled [“Sources of Hallucination by Large Language Models on Inference Tasks”](https://arxiv.org/abs/2305.14552), the authors show how hallucinations are originated by two aspects of the LLM’s training dataset: veracity prior and the relative frequency heuristic.

# How to Measure Hallucinations in Large Language Models[Permalink](https://amatria.in/blog/hallucinations#how-to-measure-hallucinations-in-large-language-models 'Permalink')

Understanding hallucinations is one thing, but quantifying them? That’s where things get really interesting. Quantitative metrics are essential for assessing the effectiveness of mitigation strategies. In this section, I’ll guide you through the recommended methodologies for measuring hallucinations.

## A Five-Step Approach to Quantitative Measurement[Permalink](https://amatria.in/blog/hallucinations#a-five-step-approach-to-quantitative-measurement 'Permalink')

Based on best practices in the field, here’s a systematic five-step approach to accurately measure hallucinations:

**1. Identify Grounding Data:** Grounding data serves as the benchmark for what the LLM should produce. The choice of grounding data varies by use-case. For instance, actual resumes could serve as grounding data when generating resume-related information. On the other hand, search engine results could be used for web-based queries.

**2. Create Measurement Test Sets:** These sets usually consist of input/output pairs and may include human-LLM conversations, depending on the application. Ideally, you’d have at least two types of test sets: * A generic or random test set * An adversarial test set, generated from red-teaming exercises to include challenging or high-risk edge cases.

**3. Extract Claims:** After preparing the test sets, the next step is to extract claims made by the LLM. This can be done manually, through rule-based methods, or even using machine learning models. Each technique has its pros and cons, which we will explore in detail.

**4. Validate Against Grounding Data:** Validation ensures that the LLM’s generated content aligns with the grounding data. This step often mirrors the extraction methods used previously.

**5. Report Metrics:** The “Grounding Defect Rate” is a fundamental metric that quantifies the ratio of ungrounded responses to the total number of generated outputs. Additional metrics will be discussed later for a more nuanced evaluation.

## Evaluating Hallucinations: Common Metrics and Methodologies[Permalink](https://amatria.in/blog/hallucinations#evaluating-hallucinations-common-metrics-and-methodologies 'Permalink')

Quantifying hallucinations in Large Language Models isn’t just about recognizing that they exist—it’s about measuring them rigorously. In this section, I’ll delve into the different types of metrics commonly employed for this purpose.

### Statistical Metrics[Permalink](https://amatria.in/blog/hallucinations#statistical-metrics 'Permalink')

Metrics like ROUGE and BLEU are often the go-to choices for text similarity evaluations. They focus on the intrinsic type of hallucinations by comparing the generated output against a source. Advanced metrics such as PARENT, PARENT-T, and Knowledge F1 come into play when a structured knowledge source is available. However, these metrics have limitations: they primarily focus on intrinsic hallucinations and can falter when capturing syntactic and semantic nuances.

### Model-Based Metrics[Permalink](https://amatria.in/blog/hallucinations#model-based-metrics 'Permalink')

Model-based metrics leverage neural networks, making them more adaptable to syntactic and semantic complexities. They come in various flavors:

**IE-based Metrics:** These use Information Extraction (IE) models to distill the knowledge into a simpler relational tuple format—think subject, relation, object. The model then validates these tuples against those extracted from the source or reference.

- **QA-based Metrics:** These implicitly measure the overlap or consistency between the generated content and the source. If the content is factually consistent with the source, similar answers will be generated to the same questions. (see e.g. “Evaluating Factual Consistency in Knowledge-Grounded Dialogues via Question Generation and Question Answering”)
- **NLI-based Metrics:** Utilizing Natural Language Inference (NLI) datasets, these metrics determine if a generated “hypothesis” is true, false, or undetermined given a “premise”.(see e.g. “Evaluating Groundedness in Dialogue Systems: The BEGIN Benchmark”).
- **Faithfulness Classification Metrics:** These improve upon NLI-based metrics by creating task-specific datasets, thereby providing a more nuanced evaluation. . (see e.g. “Rome was built in 1776: A Case Study on Factual Correctness in Knowledge-Grounded Response Generation”).

### The Role of Human Evaluation[Permalink](https://amatria.in/blog/hallucinations#the-role-of-human-evaluation 'Permalink')

Despite the sophistication of automated metrics, human evaluation still holds significant value. Two primary approaches are commonly employed:

1. **Scoring:** Human annotators assign scores within a defined range to rate the level of hallucination.
2. **Comparing:** Here, human annotators evaluate the generated content against baselines or ground-truth references, providing an additional layer of validation.

### The example of FActScore[Permalink](https://amatria.in/blog/hallucinations#the-example-of-factscore 'Permalink')

[FActScore](https://arxiv.org/abs/2305.14251) is a recent example of a metric that can be used both for human and model-based evaluation. The metric breaks an LLM generation into “atomic facts”. The final score is computed as the sum of the accuracy of each atomic fact, giving each of them equal weight. Accuracy is a binary number that simply states whether the atomic fact is supported by the source. The authors implement different automation strategies that use LLMs to estimate this metric.

![](https://amatria.in/blog/images/106-9.png)

# The Art of Red Teaming: Best Practices for Stress-Testing LLMs[Permalink](https://amatria.in/blog/hallucinations#the-art-of-red-teaming-best-practices-for-stress-testing-llms 'Permalink')

While statistical and model-based metrics are indispensable for measuring hallucinations in LLMs, it’s equally important to put these models through the rigor of human evaluation. Red teaming provides an essential layer of scrutiny that complements systematic measurement. Here are some best practices to follow:

**Keep Red Teaming Complementary:** Although red teaming and stress-testing are invaluable tools, they should not replace systematic measurement. They are meant to augment, not substitute.

**Test in Real-world Conditions:** Whenever possible, conduct your testing on the production endpoint. This allows for a more realistic assessment of how the model behaves under actual conditions.

**Define Harms and Guidelines:** Clearly outline the potential harms and provide specific guidelines to the testers. This ensures that everyone is aligned on what to look for during testing.

**Prioritize Your Focus Areas:** Identify the key features, harms, and scenarios that should be prioritized in the red teaming exercise. This focused approach yields more actionable insights.

**Diverse and Skilled Testers:** A diverse set of testers with different areas of expertise can provide a multi-faceted evaluation. Diversity here can mean different domains of knowledge, different cultural backgrounds, or even different biases.

**Documentation is Key:** Decide in advance what kinds of data or findings you’d like your testers to document. Clear documentation aids in a more structured evaluation process.

**Manage Tester Time and Well-being:** Determine how much time each tester should ideally dedicate to the task. Moreover, be cognizant of potential burnout or a decline in creativity over time, and plan accordingly.

New approaches to red teaming include using an LLM to read team another LLM. See e.g. Deepmind’s [“Red Teaming Language Models with Language Models”](https://arxiv.org/abs/2202.03286)

# Mitigating Hallucinations in Large Language Models: A Multifaceted Approach[Permalink](https://amatria.in/blog/hallucinations#mitigating-hallucinations-in-large-language-models-a-multifaceted-approach 'Permalink')

The road to minimizing hallucinations is paved with both challenges and opportunities. In this section, we’ll explore various mitigation strategies that can be customized to fit the unique demands of different applications of large language models.

## Leverage Product Design to Minimize Impact[Permalink](https://amatria.in/blog/hallucinations#leverage-product-design-to-minimize-impact 'Permalink')

The first piece of advice is straightforward: if possible, design your use case in such a way that hallucinations become a non-issue. For instance, in applications that generate written content, focusing on opinion pieces rather than factual articles may naturally lower the risk of problematic hallucinations.

### Product-Level Recommendations[Permalink](https://amatria.in/blog/hallucinations#product-level-recommendations 'Permalink')

- **User Editability:** Allow users to edit AI-generated outputs. This not only adds an extra layer of scrutiny but also improves the overall reliability of the content.
- **User Responsibility:** Make it clear that users are ultimately responsible for the content that is generated and published.
- **Citations and References:** Enabling a feature that incorporates citations can serve as a safety net, helping users verify the information before disseminating it.
- **User Optionality:** Offer various operational modes, such as a “precision” mode that uses a more accurate (but computationally expensive) model.
- **User Feedback:** Implement a feedback mechanism where users can flag generated content as inaccurate, harmful, or incomplete. This data can be invaluable for refining the model in future iterations.
- **Limit Output and Turns:** Be mindful of the length and complexity of generated responses, as longer and more complex outputs have a higher chance of producing hallucinations.
- **Structured Input/Output:** Consider using structured fields instead of free-form text to lower the risk of hallucinations. For example, if the application involves resume generation, predefined fields for educational background, work experience, and skills could be beneficial.

### Data Practices for Continuous Improvement[Permalink](https://amatria.in/blog/hallucinations#data-practices-for-continuous-improvement 'Permalink')

- **Maintain a Tracking Set:** A dynamic database should be maintained to log different types of hallucinations along with the necessary information to reproduce them. This can serve as a powerful tool for regression testing.
- **Privacy and Trust:** Given that the tracking set may contain sensitive data, adhere to best practices for data privacy and security.

## Prompt Engineering: Mastering the Art of Metaprompt Design[Permalink](https://amatria.in/blog/hallucinations#prompt-engineering-mastering-the-art-of-metaprompt-design 'Permalink')

Although large language models (LLMs) have come a long way, they are not yet perfect—especially when it comes to grounding their responses. That’s why understanding and effectively utilizing metaprompts can make a world of difference. A study revealed that simply instructing the LLM on what not to do could lower hallucination rates dramatically. Even better, guiding the model towards alternative actions slashed these rates further.

## General Guidelines to Curb Hallucinations[Permalink](https://amatria.in/blog/hallucinations#general-guidelines-to-curb-hallucinations 'Permalink')

- **Simplify Complex Tasks:** Break down intricate actions into simpler steps.
- **Harness Affordances:** Utilize built-in functions within your metaprompt.
- **Use Few-Shot Learning:** Include examples when you can.
- **Iterative Refinement:** Don’t hesitate to tweak the model’s output.

One important thing to note is that while these techniques improve grounding, they also come at a computational cost. Anyone leveraging LLMs in product design will need to balance this trade-off carefully.

## Fine-Tuning Your Metaprompts[Permalink](https://amatria.in/blog/hallucinations#fine-tuning-your-metaprompts 'Permalink')

- **Assertive Tone:** Using ALL CAPS and highlighting certain directives can improve model compliance.
- **Context is King:** Providing more background information can better ground the model.
- **Refinement Steps:** Reevaluate the initial output and make necessary adjustments.
- **Inline Citations:** Ask the model to substantiate its claims.
- **Framing:** Approaching tasks as summarization often yields more grounded results compared to question-answering.
- **Selective Grounding:** Ascertain scenarios where grounding is a must versus where it may be optional.
- **Reiterate Key Points:** Repeating essential instructions at the end of the prompt can underline their importance.
- **Echoing Input:** Request the model to recap vital input details, ensuring alignment with the source data.
- **Algorithmic Filtering:** Utilize algorithms to sift through and prioritize the most relevant information.

In upcoming sections, we’ll dissect advanced metaprompting techniques, such as the “chain of thought” approach, and delve into how Retrieval-Augmented Generation (RAG) can be leveraged for better grounding.

## Chain of Thought[Permalink](https://amatria.in/blog/hallucinations#chain-of-thought 'Permalink')

Chain of thought was initially described in the [“Chain-of-Thought Prompting Elicits Reasoning in Large Language Models”](https://arxiv.org/abs/2201.11903) paper by Google researchers. The simple idea here is that given that LLMs have been trained to predict tokens and not explicitly reason, you can get them closer to reasoning if you specify those required reasoning steps. Here is a simple example from the original paper:

![](https://amatria.in/blog/images/106-1.png)

Note that in this case the “required reasoning steps” are given in the example in blue. This is the so-called “Manual CoT”. There are in fact two ways of doing basic chain of thought prompting (see below). In the basic one, called zero-shot CoT, you simply ask the LLM to “think step by step”. In the more complex version, called “manual CoT” you have to give the LLM examples of thinking step by step to illustrate how to reason. Manual prompting is more effective, but harder to scale and maintain.

![](https://amatria.in/blog/images/106-2.png)

CoT is just a more structured approach to the “simplify complex tasks” generic recommendation above and is known to mitigate hallucinations in many situations.

## Grounding with RAG[Permalink](https://amatria.in/blog/hallucinations#grounding-with-rag 'Permalink')

Retrieval-Augmented Generation, commonly known as RAG, is a technique aimed at augmenting the capabilities of Large Language Models (LLMs). Initially [presented](https://ai.facebook.com/blog/retrieval-augmented-generation-streamlining-the-creation-of-intelligent-natural-language-processing-models/) by Facebook in 2020 in the context of their BART model, RAG has since been incorporated as a feature in the [Hugging Face library](https://huggingface.co/docs/transformers/model_doc/rag).

### The Core Concept[Permalink](https://amatria.in/blog/hallucinations#the-core-concept 'Permalink')

The fundamental idea behind RAG is straightforward: it merges a retrieval component with a generative component, allowing the two to complement each other. This process is visually explained in the diagram below, extracted from the original research paper.

![](https://amatria.in/blog/images/106-3.png)

By combining these two elements, RAG enables the LLM to access and incorporate external information, thereby grounding the generated content more effectively. The retrieval component fetches relevant data, while the generative aspect of the model synthesizes this data into coherent and contextually appropriate responses.

RAG has evolved to become an indispensable part of the prompt engineer’s toolkit. Over time, it has expanded into more complex applications, effectively serving as a concrete example within the broader framework of Toolkits, where the “tool” is typically a straightforward retriever or query engine.

Because RAG **grounds** the response to the LLM to external data, it is known to be a very effective technique to mitigate hallucinations. However, there are some caveats.

### RAG known caveats and guardrails[Permalink](https://amatria.in/blog/hallucinations#rag-known-caveats-and-guardrails 'Permalink')

**The Pitfall of Over-Reliance**. One significant drawback of using RAG is a pronounced over-reliance on the retrieval results, which can, in certain cases, lead to hallucinations. It’s crucial to understand that retrieval might produce results that are either empty, incorrect, or require further disambiguation. Below are strategies to handle each of these scenarios.

**Empty Results: Be Prepared for Voids**. When the retrieval engine returns empty results, it could either be due to a lack of relevant data in the document source or an incorrect query formulation. Meta-prompts should be designed to anticipate and guard against this scenario. If the retrieval engine returns no results, the system should opt for caution and decline to answer, stating something along the lines of, “Sorry, we don’t have enough information on this topic. Could you please rephrase your question?” More advanced strategies might involve internally reformulating the query to handle issues like user misspellings, which can lead to void results.

**Ambiguous Results: Seek Clarification**. For ambiguous queries such as “What is a good restaurant in Portland?”, where Portland could refer to multiple locations, it’s advisable to seek further clarification from the user. For example, “Did you mean Portland, OR, or Portland, ME?”

**Wrong Results: Navigate Carefully**. Incorrect retrieval results are particularly challenging to address because they are difficult to identify without an external ground truth. While improving the accuracy of retrieval engines is a complex problem that’s beyond the scope of this document, we recommend analyzing the performance of your retrieval solution within your application’s specific use cases. Design your prompts to be extra cautious in areas where the retrieval engine has been identified to be less accurate.

## Advanced Prompt Engineering methods[Permalink](https://amatria.in/blog/hallucinations#advanced-prompt-engineering-methods 'Permalink')

Over the past few months, significant efforts have been directed towards mitigating the issues of hallucinations and grounding in Large Language Models (LLMs). These endeavors have led to a variety of innovative approaches that tackle the problem from a prompt engineering perspective. It’s important to note that these advanced methods are distinctly different from the more straightforward “design tricks” discussed earlier. I will give a few examples of advanced prompt engineering methods that are relevant in the context of preventing hallucination. If you are interested in a more comprehensive catalog, check my previous post [“Prompt Engineering 201: Advanced methods and toolkits”](https://amatriain.net/blog/prompt201)

**Complexity, Latency, and Cost**: Advanced prompt engineering techniques often introduce additional complexity, latency, and cost, primarily because they frequently involve making multiple calls to the LLM. However, it’s crucial to grasp their functionality and to have these advanced methods in your prompt engineering toolbox.

**Trade-offs and Opportunities**: In some cases, the incremental costs and latency might be justifiable, given the improvement in grounding and reduction in hallucinations. Additionally, you may find opportunities to implement some of these advanced methods using smaller, more cost-effective models. This could offer a valuable compromise between performance and expense.

By understanding these advanced prompt engineering methods, you can make more informed decisions about when and how to apply them, and whether their benefits outweigh their costs for your specific application.

### Self-consistency[Permalink](https://amatria.in/blog/hallucinations#self-consistency 'Permalink')

Self consistency, introduced in the paper [“SelfCheckGPT: Zero-Resource Black-Box Hallucination Detection for Generative Large Language Models”](https://arxiv.org/abs/2303.08896), is a method to use an LLM to fact-check itself. The idea is a simple ensemble-based approach where the LLM is asked to generate several responses to the same prompt. The consistency between those responses indicates how accurate the response may be.

![](https://amatria.in/blog/images/106-4.png)

The diagram above illustrates the approach in a QA scenario. In this case, the “consistency” is measured by the number of answers to passages that agree with the overall answer. However, the authors introduce two other measures of consistency (BERT-scores, and n-gram), and a fourth one that combines the three.

### Reason and act (React)[Permalink](https://amatria.in/blog/hallucinations#reason-and-act-react 'Permalink')

React is a specific approach to designing agents introduced by Google in [“ReAct: Synergizing Reasoning and Acting in Language Models”](https://www.promptingguide.ai/techniques/react). This method prompts the LLM to generate both verbal reasoning traces and actions in an interleaved manner, which allows the model to perform dynamic reasoning. Importantly, the authors find that the React approach reduces hallucination from CoT. However, this increase in groundedness and trustworthiness, also comes at the cost of slightly reduced flexibility in reasoning steps (see the paper for more details).

![](https://amatria.in/blog/images/106-5.png)

### Reflection[Permalink](https://amatria.in/blog/hallucinations#reflection 'Permalink')

In the Self-consistency approach we saw how LLMs can be used to infer the confidence in a response. In that approach, confidence is measured as a by-product of how similar several responses to the same question are. Reflection goes a step further and tries to answer the question of whether (or how) we can ask an LLM directly about the confidence in its response. As [Eric Jang puts it](https://evjang.com/2023/03/26/self-reflection.html), there is “some preliminary evidence that GPT-4 possesses some ability to edit own prior generations based on reasoning whether their output makes sense”.

The Reflexion [paper](https://arxiv.org/abs/2303.11366) proposes an approach defined as “reinforcement via verbal reflection” with different components. The actor, an LLM itself, produces a trajectory (hypothesis). The evaluator produces a score on how good that hypothesis is. The self reflection component produces a summary that is stored in memory. The process is repeated iteratively until the Evaluator decides it has a “good enough” answer. The authors show through experiments how reflection greatly improves the ability of detecting hallucinations even when compared to a ReAct agent.

![](https://amatria.in/blog/images/106-6.png)

### Dialog-Enabled Resolving Agents (DERA)[Permalink](https://amatria.in/blog/hallucinations#dialog-enabled-resolving-agents-dera 'Permalink')

[DERA](https://arxiv.org/abs/2303.17071), developed by my former team at Curai Health for their specific healthcare approach, defines different agents that, in the context of a dialog, take different roles. In the case of high stakes situations like a medical conversation, it pays off to define a set of “Researchers” and a “Decider”. The main difference here is that the Researchers operate in parallel vs. the Reflexion Actors that operate sequentially only if the Evaluator decides.

![](https://amatria.in/blog/images/106-7.png)

### Chain-of-Verification (COVE)[Permalink](https://amatria.in/blog/hallucinations#chain-of-verification-cove 'Permalink')

[COVE](https://arxiv.org/abs/2309.11495), recently presented by Meta, presents yet another variation on using different instances of the LLM to produce several responses and self-validate. In their approach, illustrated in the figure below, the model first (i) drafts an initial response; then (ii) plans verification questions to fact-check its draft; (iii) answers those questions independently so the answers are not biased by other responses; and (iv) generates its final verified response.

![](https://amatria.in/blog/images/106-8.png)

### Rails[Permalink](https://amatria.in/blog/hallucinations#rails 'Permalink')

A [rail](https://github.com/NVIDIA/NeMo-Guardrails/blob/main/docs/README.md) is simply a programmable way to control the output of an LLM. Rails are specified using Colang, a simple modeling language, and Canonical Forms, templates to standardize natural language sentences (see [here](https://github.com/NVIDIA/NeMo-Guardrails/blob/main/docs/getting_started/hello-world.md))

Using rails, one can implement ways to have the LLM behave in a particular way. Of particular interest to our discussion, there is a rail to minimize hallucination (Fact checking rail).

### Guidance (Constrained Prompting)[Permalink](https://amatria.in/blog/hallucinations#guidance-constrained-prompting 'Permalink')

“Constrained Prompting” is a term recently [introduced](https://youtu.be/bZQun8Y4L2A?t=2093) by Andrej Karpathy to describe approaches and languages that allow us to interleave generation, prompting, and logical control in an LLM flow.

[Guidance](https://github.com/microsoft/guidance) is the only example of such an approach that I know although one could argue that React is also a constrained prompting approach. The tool is not so much a prompting approach but rather a “prompting language”. Using guidance templates, you can pretty much implement most if not all the approaches in this post. Guidance uses a syntax based on [Handlebars](https://handlebarsjs.com/) that allows to interleave prompting and generation, as well as manage logical control flow and variables. Because Guidance programs are declared in the exact linear order that they will be executed, the LLM can, at any point, be used to generate text or make logical decisions.

## Model Choices for Mitigating Hallucinations[Permalink](https://amatria.in/blog/hallucinations#model-choices-for-mitigating-hallucinations 'Permalink')

### Size and Model Complexity as a General Heuristic[Permalink](https://amatria.in/blog/hallucinations#size-and-model-complexity-as-a-general-heuristic 'Permalink')

A well-accepted guideline within the field suggests that larger, more complex models typically offer superior grounding capabilities. For example, empirical evaluations have shown that GPT-4 substantially outperforms its predecessor, GPT-3.5, in reducing the occurrence of hallucinations.

### The Significance of Model Temperature[Permalink](https://amatria.in/blog/hallucinations#the-significance-of-model-temperature 'Permalink')

Model temperature serves as a critical hyperparameter that influences the stochastic behavior of the model’s output. In a nutshell, it determines the level of randomness when predicting subsequent tokens. Higher temperatures increase the selection probabilities for tokens that are less likely, making the model’s output more diverse but potentially less grounded. Conversely, a lower temperature, approaching zero, results in the model sticking more closely to high-probability tokens, generally yielding more reliable and grounded outputs.

### Leveraging Reinforcement Learning from Human Feedback (RLHF)[Permalink](https://amatria.in/blog/hallucinations#leveraging-reinforcement-learning-from-human-feedback-rlhf 'Permalink')

RLHF methods can be applied during the later stages of training to optimize for more accurate and grounded outputs. These methods have shown marked improvements in hallucination mitigation, especially for models that have undergone domain-specific fine-tuning.

### Domain adaptation through Fine-Tuning[Permalink](https://amatria.in/blog/hallucinations#domain-adaptation-through-fine-tuning 'Permalink')

Lastly, if you’re developing for a specific application, you might want to consider fine-tuning your internal models. Fine-tuning to your own data and examples can make a world of difference in grounding your outputs and minimizing those pesky hallucinations, particularly if you want to use a smaller and more efficient LLM. As of this writing, OpenAI offers fine-tuning for GPT-3.5 Turbo and acknowledges that in some applications this can yield better results than using the much larger and expensive GPT-4.

# Conclusion[Permalink](https://amatria.in/blog/hallucinations#conclusion 'Permalink')

As we have seen in this discussion of hallucinations, the problem is not an easy one to solve. In fact, Yann Lecun argues that [it cannot be solved](https://spectrum.ieee.org/ai-hallucination) without a complete redesign of the underlying models (although Ilya Sutskever disagrees). I stand somewhere in between: with the current underlying technology, hallucinations are just an expected side-effect and are hard to completely rule out. However, a combination of techniques can mitigate them and make them completely acceptable for most if not all use cases. After all, as I explained in [a previous blog post](https://amatriain.net/blog/llmsdoctors), even medical doctors hallucinate!。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Mitigating%20LLM%20Hallucinations%20-%20a%20multifaceted%20approach.html</guid><pubDate>Sat, 12 Jul 2025 12:13:12 +0000</pubDate></item><item><title>FLOAT</title><link>https://winnerineast.github.io/post/FLOAT.html</link><description>https://deepbrainai-research.github.io/float/
### Generative Motion Latent Flow Matching for Audio-driven Talking Portrait

[Taekyung Ki1](https://taekyungki.github.io/) [Dongchan Min2](https://kevinmin95.github.io/) [Gyeongsu Chae1](https://www.aistudios.com/ko/home)

1DeepBrain AI Inc. 2Graduate School of AI, KAIST

ArXiv 2024

[Paper (Soon)](https://deepbrainai-research.github.io/float/) [Video (Soon)](https://deepbrainai-research.github.io/float/) [Code (Soon)](https://deepbrainai-research.github.io/float/)

## Abstract

![](https://deepbrainai-research.github.io/float/src/img/float-abstract.png)  

With the rapid advancement of diffusion-based generative models, portrait image animation has achieved remarkable results. However, it still faces challenges in temporally consistent video generation and fast sampling due to its iterative sampling nature. This paper presents FLOAT, an audio-driven talking portrait video generation method based on flow matching generative model. We shift the generative modeling from the pixel-based latent space to a learned motion latent space, enabling efficient design of temporally consistent motion. To achieve this, we introduce a transformer-based vector field predictor with a simple yet effective frame-wise conditioning mechanism. Additionally, our method supports speech-driven emotion enhancement, enabling a natural incorporation of expressive motions. Extensive experiments demonstrate that our method outperforms state-of-the-art audio-driven talking portrait methods in terms of visual quality, motion fidelity, and efficiency.

TL;DR: FLOAT is a flow matching based audio-driven talking portrait video generation method, which can enhance the speech-driven emotional motion.

## Method Overview

![Responsive image](https://deepbrainai-research.github.io/float/src/img/overview.png)

Audio-driven talking portrait aims to synthesize talking portrait videos using a single source portrait image and driving audio. FLOAT is built upon a motion latent auto-encoder that encodes the given portrait image into an (identity-motion) latent representation. We generates audio-conditioned talking portrait motion latents through the flow matching (with optimal transport trajectories). To enhace the naturalness of generated talking motion, we incorporate the speech-driven emotion labels (😀), providing a natural approach of emotion-aware talking portrait motion generation.

## Results

  

#### Results with Out-of-distribution Datas

FLOAT can generate realistic talking portrait videos using OOD portrait images and audio.

  

  

  
  

#### Emotion Redirection

Since FLOAT is trained with speech-driven emotion labels, it can re-direct the emotion of the talking portrait during the inference phase. Specifically, we can manipulate the predicted speech-driven emotion label with a simple one-hot emotion label, which can be further refined through classifier-free vector fields. This enables users to refine emotion even when the driving speech conveys ambiguious or mixed emotions.

  

  
  

#### Comparison with State-of-the-art Methods

We compare with state-of-the-art non-diffusion-based methods and diffusion-based methods. For non-diffusion-based methods, we choose SadTalker and EDTalk. For diffusion-based methods, we choose AniTalker, Hallo, and EchoMimic.

[Previous](https://deepbrainai-research.github.io/float/#carouselExampleControls)[Next](https://deepbrainai-research.github.io/float/#carouselExampleControls)

  
  

#### Ablation Studies on Frame-wise AdaLN and Flow Matching

We conduct ablation studies on frame-wise AdaLN (and gating) and flow matching. For frame-wise AdaLN (and gating), we compare it with cross-attention mechanism, which is widely used in conditional generation. For flow matching, we compare it with two types of diffusion models (ϵϵ-prediction and x0x0-prediction). We observe that frame-wise AdaLN (and gating) can generate more diverse head motions than cross-attention. We also observe that flow mathcing can generate more temporally consistent videos with accurate lip-synchronization than diffusion models.

[Previous](https://deepbrainai-research.github.io/float/#carouselExampleControls1)[Next](https://deepbrainai-research.github.io/float/#carouselExampleControls1)

  
  

#### Different Number of Function Evaluations (NFEs)

The small number of function evaluations (NFEs) affects temporal consistency. This is because we generate the motion latents, not the content itself. FLOAT is capable of generating reasonable video results with approximately 10 NFEs.

[Previous](https://deepbrainai-research.github.io/float/#carouselExampleControls2)[Next](https://deepbrainai-research.github.io/float/#carouselExampleControls2)

  
  

#### Emotion Guidance Scales

We can control the intensity of the emotion by adjusting the emotion guidance scale. Note that the predicted speech-driven emotion label is **Disgust** with a 99.99% probability.

  
  

#### Additional Driving Conditions

We also investigate another types of driving conditions, such as 3DMM head pose parameters, to improve the controllability and naturalness. Here, 3DPose, S2E, and I2E are 3DMM head pose parameters, Speech-to-emotion label, and Image-to-emotion label, resepctively.

  

  
  

#### Ablation Study on Facial Component Perceptual Loss in Phase 1

The proposed facial component perceptual loss for the motion latent auto-encoder significantly improves visual quality (e.g., teeth and eyes), as well as fine-grained motion (e.g., eyeball movement and lip motion).

  

## Citation

If you want to cite our work, please use:

          TBA
          
      

## Acknowledgement

The source images and audio are collected from the internet and other baselines, such as SadTalker, EMO, VASA-1, Hallo, LivePortrait, Loopy, and others. We appreciate their valuable contributions to this field. This project page is based on the project page of [RegNeRF](https://m-niemeyer.github.io/regnerf). You can easily use it from [the github repository](https://github.com/m-niemeyer/regnerf).。</description><guid isPermaLink="true">https://winnerineast.github.io/post/FLOAT.html</guid><pubDate>Sat, 12 Jul 2025 12:12:06 +0000</pubDate></item><item><title>A statistical approach to model evaluations</title><link>https://winnerineast.github.io/post/A%20statistical%20approach%20to%20model%20evaluations.html</link><description>

Nov 20, 2024

[Read the paper](https://arxiv.org/abs/2411.00640)

Suppose an AI model outperforms another model on a benchmark of interest—testing its general knowledge, for example, or its ability to solve computer-coding questions. Is the difference in capabilities real, or could one model simply have gotten lucky in the choice of questions on the benchmark?

With the amount of public interest in AI model evaluations—informally called “evals”—this question remains surprisingly understudied among the AI research community. This month, we published a [new research paper](https://arxiv.org/abs/2411.00640) that attempts to answer the question rigorously. Drawing on statistical theory and the experiment design literature, the paper makes a number of recommendations to the AI research community for reporting eval results in a scientifically informative way. In this post, we briefly go over the reporting recommendations, and the logic behind them.

### Recommendation #1: Use the Central Limit Theorem

Evals often consist of hundreds or thousands of unrelated questions. [MMLU](https://arxiv.org/abs/2009.03300v3), for instance, contains questions as diverse as:

- Who discovered the first virus?
- What is the inverse of 𝑓(𝑥)=4−5𝑥?
- Who said that “Jurisprudence is the eye of law”?

To compute an overall eval score, each question is separately scored, and then the overall score is (usually) a simple average of these question scores. Typically, researchers focus their attention on this observed average. But in our paper, we argue that the real object of interest should not be the _observed_ average, but rather the _theoretical_ average across all possible questions. So if we imagine that eval questions were drawn from an unseen “question universe,” we can learn about the average score in that universe—that is, we can measure the underlying _skill_, independent of the “luck of the draw”—using statistical theory.

![](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fb34871a36ad66fa0330e3ad6488ee87eb96bddda-2401x1260.png&amp;w=3840&amp;q=75)

If we imagine that eval questions were drawn from a “question universe,” then eval scores will tend to follow a normal distribution, centered around the average score of all possible questions.

This formulation buys us analytic robustness: if a new eval were to be created with questions having the same difficulty distribution as the original eval, we should generally expect our original conclusions to hold.

In technical terms: under the fairly mild conditions of the [Central Limit Theorem](https://en.wikipedia.org/wiki/Central_limit_theorem), the mean values of several random samples taken from the same underlying distribution will tend to follow a [normal distribution](https://en.wikipedia.org/wiki/Normal_distribution). The standard deviation (or width) of that normal distribution is commonly known as the [standard error of the mean](https://en.wikipedia.org/wiki/Standard_error), or SEM. In our paper, we encourage researchers to report the SEM, derived from the Central Limit Theorem, alongside each calculated eval score—and we show researchers how to use the SEM to quantify the difference in theoretical means between two models. A 95% [confidence interval](https://en.wikipedia.org/wiki/Confidence_interval) can be calculated from the SEM by adding and subtracting 1.96 × SEM from the mean score.

### Recommendation #2: Cluster standard errors

Many evals violate the above assumption of independently selected questions, and instead consist of groups of closely related questions. For example, several questions in a reading-comprehension eval may ask about the same passage of text. Popular evals that follow this pattern include [DROP](https://aclanthology.org/N19-1246/), [QuAC](https://arxiv.org/abs/1808.07036), [RACE](https://aclanthology.org/D17-1082/), and [SQuAD](https://arxiv.org/abs/1806.03822).

For these evals, each question’s selection from the “question universe” is no longer independent. Because including several questions about the same passage of text will yield less information than selecting the same number of questions about different passages of text, a naive application of the Central Limit Theorem to the case of non-independent questions will lead us to underestimate the standard error—and potentially mislead analysts into drawing incorrect conclusions from the data.

Fortunately, the problem of [clustered standard errors](https://en.wikipedia.org/wiki/Clustered_standard_errors) has been extensively studied in the social sciences. When the inclusion of questions is non-independent, we recommend clustering standard errors on the unit of [randomization](https://en.wikipedia.org/wiki/Randomization) (for example, passage of text), and we provide applicable formulas in our paper.

![](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Ff6f90f93dc66380904709a3ef4d63b92332871fd-2401x1260.png&amp;w=3840&amp;q=75)

If questions arrive in related clusters—a common pattern in reading-comprehension evals—eval scores will be more spread-out compared to the non-clustered case.

In practice, we have found that clustered standard errors on popular evals can be over three times as large as naive standard errors. Ignoring question clustering may lead researchers to inadvertently detect a difference in model capabilities when in fact none exists.

### Recommendation #3: Reduce variance within questions

Variance is a measurement of how spread-out a random variable is. The variance of an eval score is the square of the standard error of the mean, discussed above; this quantity depends on the amount of variance in the score on each individual eval question.

A key insight of our paper is to decompose a model’s score on a particular question into two terms that are added together:

- The mean score (the average score that the model would achieve if asked the same question an infinite number of times—even if the model might produce a different answer each time); and
- A random component (the difference between a realized question score and the mean score for that question).

Thanks to the [law of total variance](https://en.wikipedia.org/wiki/Law_of_total_variance), reducing the variance in the random component directly leads to a smaller standard error of the overall mean, and thus greater statistical precision. Our paper highlights two strategies for reducing variance in the random component depending on whether or not the model is asked to think step by step before answering (a prompting technique known as CoT, or chain-of-thought reasoning).

If an eval uses chain-of-thought reasoning, we recommend resampling answers from the same model several times, and using the question-level averages as the question scores fed into the Central Limit Theorem. We note that the [Inspect framework](https://github.com/UKGovernmentBEIS/inspect_ai/) correctly computes standard errors in this way via its [_epochs_ parameter](https://inspect.ai-safety-institute.org.uk/scorers.html#sec-reducing-epochs).

![](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fefef59a06ddeb530fa15f31dc0937f28f70f655b-2401x1260.png&amp;w=3840&amp;q=75)

If a model produces answers non-deterministically, then generating (and grading) several answers per question will result in less spread-out eval scores.

If the eval does not use chain-of-thought reasoning (i.e., its answers are not “path dependent”), we note that the random component in the score may often be eliminated altogether using next-token probabilities from the language model. For example, if the correct answer to a multiple-choice question is “B”, we would simply use the probability of the model producing the token “B” as the question score. We are not aware of an open-source evals framework which implements this technique.

### Recommendation #4: Analyze paired differences

Eval scores don’t have any meaning on their own; they only make sense in relation to one another (one model outperforms another model, or ties another model, or outperforms a person). But could a measured difference between two models be due to the specific choice of questions in the eval, and randomness in the models’ answers? We can find out with a [two-sample _t_-test](https://en.wikipedia.org/wiki/Student%27s_t-test), using only the standard errors of the mean calculated from both eval scores.

However, a two-sample test ignores the hidden structure inside eval data. Since the question list is shared across models, conducting a [paired-differences test](https://en.wikipedia.org/wiki/Paired_difference_test) lets us eliminate the variance in question difficulty and focus on the variance in responses. In our paper, we show how the result of a paired-differences test will be related to the [Pearson correlation coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient) between two models’ question scores. When the correlation coefficient is higher, the standard error of the mean difference will be smaller.

In practice, we find the correlation of question scores on popular evals between frontier models to be substantial—between 0.3 and 0.7 on a scale of −1 to +1. Put another way, frontier models have an overall tendency to get the same questions right and wrong. Paired-difference analysis thus represents a “free” variance reduction technique that is very well suited for AI model evals. Therefore, in the interest of extracting the clearest signal from the data, our paper recommends reporting pairwise information—mean differences, standard errors, confidence intervals, and correlations—whenever two or more models are being compared.

### Recommendation #5: Use power analysis

The flip side of the statistical significance coin is statistical power, which is the ability of a statistical test to detect a difference between two models, assuming such a difference exists. If an eval doesn’t have very many questions, confidence intervals associated with any statistical tests will tend to be wide. This means that models will need to have a large underlying difference in capabilities in order to register a statistically significant result—and that small differences will likely go undetected. Power analysis refers to the mathematical relationship between observation count, [statistical power](https://en.wikipedia.org/wiki/Power_(statistics)), the [false positive rate](https://en.wikipedia.org/wiki/False_positive_rate), and the [effect size](https://en.wikipedia.org/wiki/Effect_size) of interest.

In our paper, we show how to apply concepts from power analysis to evals. Specifically, we show researchers how to formulate a hypothesis (such as _Model A outperforms Model B by 3 percentage points_) and calculate the number of questions that an eval should have in order to test this hypothesis against the null hypothesis (such as _Model A and Model B are tied_).

We believe that power analysis will prove helpful to researchers in a number of situations. Our power formula will inform evaluators of models about the number of times to re-sample answers from questions (see Recommendation #3 above), as well as the number of questions that may be included in a random subsample while retaining the desired power properties. Researchers might use the power formula to conclude that an eval with a limited number of available questions is not worth running on a particular pair of models. Developers of new evals may wish to use the formula to help decide how many questions to include.

### Conclusion

Statistics is the science of measurement in the presence of noise. Evals present a number of practical [challenges](https://www.anthropic.com/news/evaluating-ai-systems), and a true [science of evals](https://www.apolloresearch.ai/blog/we-need-a-science-of-evals) remains underdeveloped. Statistics can only form one aspect of a science of evals—but a critical one, as an empirical science is only as good as its measuring tools. We hope that the recommendations in our paper [**Adding Error Bars to Evals: A Statistical Approach to Language Model Evaluations**](https://arxiv.org/abs/2411.00640) will help AI researchers calculate, interpret, and communicate eval numbers with greater precision and clarity than before—and we encourage researchers in the AI community to explore other techniques from experiment design so that they may understand more exactly all the things that they want to measure.

  
。</description><guid isPermaLink="true">https://winnerineast.github.io/post/A%20statistical%20approach%20to%20model%20evaluations.html</guid><pubDate>Sat, 12 Jul 2025 12:10:19 +0000</pubDate></item><item><title>顶级 LLM 和 VLM 学习资源清单</title><link>https://winnerineast.github.io/post/ding-ji-%20LLM%20-he-%20VLM%20-xue-xi-zi-yuan-qing-dan.html</link><description>
1. makemore by [Andrej Karpathy](https://youtu.be/PaCmpygFfXo?si=dZCY8sictT658_Sk) 
2. minbpe by [karpathy](https://youtu.be/kCc8FmEb1nY?si=W61JnqMT4gjzF37q) 
3. attention? attention! [Lilian Weng](https://lilianweng.github.io/posts/2018-06-24-attention) ![[Attention_Attention.pdf]]
4. gpt-2 again by [karpathy](https://youtu.be/kCc8FmEb1nY?si=454hxUDiqD-t4YU0) 
5. llama3 from scratch by [naklecha](https://github.com/naklecha/llama3-from-scratch) 
6. llm training in simple, raw by c/cuda [karpathy](https://github.com/karpathy/llm.c) 
7. decoding strategies in large language models [mlabonne](https://mlabonne.github.io/blog/posts/2023-06-07-Decoding_strategies.html) 
8. how to make llms go fast by [vgel](https://vgel.me/posts/faster-inference/#KV_caching) ![[How to make LLMs go fast.pdf]]
9. a visual guide to quantization [maarten](https://www.maartengrootendorst.com/blog/quantization/)![[A visual guide to quantization.pdf]]
10. extending the RoPE by [eleutherai](https://blog.eleuther.ai/yarn) ![[Extending the RoPE.pdf]]
11. the novice's llm training guide by [alpin](https://rentry.org/llm-training) ![[The Novice LLM Training Guide.pdf]]
12. a survey on evaluation of large language models [paper](https://arxiv.org/abs/2307.03109) ![[2307.03109v9.pdf]]
13. mixture of experts explained [huggingface](https://huggingface.co/blog/moe) ![[Mixture of Experts Explained.pdf]]
14. vision transformer by [aman-arora](https://amaarora.github.io/posts/2021-01-18-ViT.html) ![[Vision Transformer.pdf]]
15. clip, siglip and paligemma by [umar-jamil](https://youtu.be/vAmKB7iPkWw?si=p4d2eoVNz0Nqwkxs)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/ding-ji-%20LLM%20-he-%20VLM%20-xue-xi-zi-yuan-qing-dan.html</guid><pubDate>Sat, 12 Jul 2025 12:09:50 +0000</pubDate></item><item><title>陶哲轩：AI与人类在学习和问题解决上的根本差异是……</title><link>https://winnerineast.github.io/post/tao-zhe-xuan-%EF%BC%9AAI-yu-ren-lei-zai-xue-xi-he-wen-ti-jie-jue-shang-de-gen-ben-cha-yi-shi-%E2%80%A6%E2%80%A6.html</link><description>
AI，尽管在处理复杂任务时表现出色，但其思考过程更像是一个“平庸的研究助理”，缺乏真正的理解与创造力。</description><guid isPermaLink="true">https://winnerineast.github.io/post/tao-zhe-xuan-%EF%BC%9AAI-yu-ren-lei-zai-xue-xi-he-wen-ti-jie-jue-shang-de-gen-ben-cha-yi-shi-%E2%80%A6%E2%80%A6.html</guid><pubDate>Sat, 12 Jul 2025 12:09:17 +0000</pubDate></item><item><title>解构 AI 原生应用 - 企业软件的未来图景</title><link>https://winnerineast.github.io/post/jie-gou-%20AI%20-yuan-sheng-ying-yong-%20-%20-qi-ye-ruan-jian-de-wei-lai-tu-jing.html</link><description>
&lt;img width='2000' height='1125' alt='Image' src='https://github.com/user-attachments/assets/2a7cad0a-f31b-4ff1-b153-7c14a45da4ba' /&gt;

「来自 Sapphire Ventures 的重要文章，通过设计、数据、专业领域、动态特性、商业分发五大维度，探讨 AI 如何从'功能附加'转向'核心驱动'，重塑下一代企业软件的发展方向」 「AI 原生应用的定义」 - AI 是应用的核心体验，而不只是附加功能 - 建立在基础 AI 能力之上 - 能突破传统的速度、规模和成本限制 - 能持续改进和优化 - 包含一定程度的专有 AI 技术 「市场现状」 - 2024年 AI 原生应用的融资达到85亿美元 - 已有至少47家 AI 原生应用公司年收入超过2500万美元 - 预计明年将有同等数量公司年收入超过5000万美元 「评估框架(5个维度)」 A. 设计(Design): - 创建新的交互模式 - 加速反馈循环 - 开发 AI 原生系统架构 B. 数据(Data): - 提高端到端数据管理的严谨性 - 利用潜在数据价值 - 创建新的专有数据集 C. 领域专长(Domain Expertise): - 将特定领域活动转化为 AI 加速的工作流 - 大规模快速合成 - 结合全局和本地知识 D. 动态性(Dynamism): - 实时优化性能与成本权衡 - 创建生成式客户旅程 - 实现多层次超个性化 E. 分发(Distribution): - 增加定价和包装灵活性 - 实现新商业模式。</description><guid isPermaLink="true">https://winnerineast.github.io/post/jie-gou-%20AI%20-yuan-sheng-ying-yong-%20-%20-qi-ye-ruan-jian-de-wei-lai-tu-jing.html</guid><pubDate>Sat, 12 Jul 2025 12:08:55 +0000</pubDate></item><item><title>现代 LLM 理论到工程实践 从预训练到部署</title><link>https://winnerineast.github.io/post/xian-dai-%20LLM%20-li-lun-dao-gong-cheng-shi-jian-%20-cong-yu-xun-lian-dao-bu-shu.html</link><description>
讲师

[@yanndubs](https://x.com/yanndubs)

(

[@OpenAI](https://x.com/OpenAI)

| PhD

[@StanfordAILab](https://x.com/StanfordAILab)

) 这门课程非常系统地介绍了构建现代 LLM 的完整技术栈, 从基础概念到实践细节都有涉及。</description><guid isPermaLink="true">https://winnerineast.github.io/post/xian-dai-%20LLM%20-li-lun-dao-gong-cheng-shi-jian-%20-cong-yu-xun-lian-dao-bu-shu.html</guid><pubDate>Sat, 12 Jul 2025 12:08:15 +0000</pubDate></item><item><title>模型注册表的全景运作</title><link>https://winnerineast.github.io/post/mo-xing-zhu-ce-biao-de-quan-jing-yun-zuo.html</link><description>
揭开MLOps的核心奥秘：模型注册表的全景运作！ 这张图展示了在MLOps（机器学习运维）中，模型注册表如何作为核心环节，协调和管理整个机器学习流水线。</description><guid isPermaLink="true">https://winnerineast.github.io/post/mo-xing-zhu-ce-biao-de-quan-jing-yun-zuo.html</guid><pubDate>Sat, 12 Jul 2025 12:07:45 +0000</pubDate></item><item><title>如何打造属于你的定制化大模型聊天机器人</title><link>https://winnerineast.github.io/post/ru-he-da-zao-shu-yu-ni-de-ding-zhi-hua-da-mo-xing-liao-tian-ji-qi-ren.html</link><description>
1. 文档拆解： - 首先，你得有一些文本资料（Documents）。</description><guid isPermaLink="true">https://winnerineast.github.io/post/ru-he-da-zao-shu-yu-ni-de-ding-zhi-hua-da-mo-xing-liao-tian-ji-qi-ren.html</guid><pubDate>Sat, 12 Jul 2025 12:07:16 +0000</pubDate></item><item><title>全面解码MLOps - 从构想到落地的机器学习之旅</title><link>https://winnerineast.github.io/post/quan-mian-jie-ma-MLOps%20-%20-cong-gou-xiang-dao-luo-di-de-ji-qi-xue-xi-zhi-lv.html</link><description>&lt;img width='1818' height='1892' alt='Image' src='https://github.com/user-attachments/assets/792fc6af-5295-4faa-8570-fb3f33be16d6' /&gt;

这张图展示了一个端到端的MLOps（机器学习运维）架构，分为几个关键步骤和区域。</description><guid isPermaLink="true">https://winnerineast.github.io/post/quan-mian-jie-ma-MLOps%20-%20-cong-gou-xiang-dao-luo-di-de-ji-qi-xue-xi-zhi-lv.html</guid><pubDate>Sat, 12 Jul 2025 12:06:34 +0000</pubDate></item><item><title>五大主流Agentic框架优劣对比分析</title><link>https://winnerineast.github.io/post/wu-da-zhu-liu-Agentic-kuang-jia-you-lie-dui-bi-fen-xi.html</link><description>
「微软、OpenAI 等科技巨头推出的五大多 AI 代理框架各具特色，AutoGen 适合开发、CrewAI 易上手、LangGraph 最灵活、Swarm 最简单、Magnetic-One 较全能，开发者该怎么选呢？」 1. AutoGen

[@pyautogen](https://x.com/pyautogen)

- 优势: - 最早且最流行的框架 - 特别适合软件开发任务 - 有微软强大的社区支持 - 基于用户代理和助手代理的交互模式 - 局限: - 对非程序员不够友好 - 设置复杂,特别是使用本地LLM时 - 在非软件开发任务上表现一般 2. CrewAI

[@crewAIInc](https://x.com/crewAIInc)

- 优势: - 非常直观,主要依赖提示词编写 - 容易创建和添加新代理 - 对非技术用户友好 - 与大多数LLM提供商兼容 - 局限: - 灵活性和自定义性有限 - 主要适合基础用例 - 代理之间的交互存在一些bug - 社区支持有限 3. LangGraph

[@LangChainAI](https://x.com/LangChainAI)

- 优势: - 建立在LangChain之上,基于有向循环图 - 非常灵活和可定制 - 有良好的社区支持 - 可与开源LLM和各种API配合使用 - 局限: - 文档不够完善 - 对非程序员不够友好 - 需要较强的编程技能 4. OpenAI Swarm

[@OpenAIDevs](https://x.com/OpenAIDevs)

- 优势: - 最容易上手的框架 - 简化了代理创建和切换 - 适合快速demo - 局限: - 仅支持OpenAI API - 不适合生产部署 - 灵活性不足 - 社区支持薄弱 5. Magnetic-One (

[@OpenAtMicrosoft](https://x.com/OpenAtMicrosoft)

) - 优势: - 适合非程序员 - 预装5个代理(含1个管理代理) - 建立在AutoGen之上 - 局限: - 开源LLM支持复杂 - 灵活性不足 - 文档和社区支持几乎没有 作者的最终建议: - 软件开发任务选择 AutoGen - 新手入门选择 OpenAI Swarm 或 CrewAI - 复杂任务选择 LangGraph - 开源LLM使用推荐 LangGraph - 社区支持最好的是 AutoGen - 快速启动选择 CrewAI - 成本效益考虑 Magnetic-One。</description><guid isPermaLink="true">https://winnerineast.github.io/post/wu-da-zhu-liu-Agentic-kuang-jia-you-lie-dui-bi-fen-xi.html</guid><pubDate>Sat, 12 Jul 2025 12:05:31 +0000</pubDate></item><item><title>一款PDF转JSON,Markdown的工具：Docling</title><link>https://winnerineast.github.io/post/yi-kuan-PDF-zhuan-JSON%2CMarkdown-de-gong-ju-%EF%BC%9ADocling.html</link><description>支持详细页面布局和阅读顺序理解、表格结构恢复，元数据提取，支持OCR功能，可用于扫描的PDF 

github：[https://github.com/DS4SD/docling](https://t.co/AOYqyN8JN5)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/yi-kuan-PDF-zhuan-JSON%2CMarkdown-de-gong-ju-%EF%BC%9ADocling.html</guid><pubDate>Sat, 12 Jul 2025 12:05:05 +0000</pubDate></item><item><title>What is 𝗔𝗴𝗲𝗻𝘁𝗶𝗰 𝗥𝗔𝗚</title><link>https://winnerineast.github.io/post/What%20is%20%F0%9D%97%94%F0%9D%97%B4%F0%9D%97%B2%F0%9D%97%BB%F0%9D%98%81%F0%9D%97%B6%F0%9D%97%B0%20%F0%9D%97%A5%F0%9D%97%94%F0%9D%97%9A.html</link><description>
In real world applications, simple naive RAG systems are rarely used nowadays. To provide correct answers to a user query, we are always adding some agency to the RAG system. However, it is important to 𝗻𝗼𝘁 𝗴𝗲𝘁 𝗹𝗼𝘀𝘁 𝗶𝗻 𝘁𝗵𝗲 𝗯𝘂𝘇𝘇 𝗮𝗻𝗱 𝘁𝗲𝗿𝗺𝗶𝗻𝗼𝗹𝗼𝗴𝘆 and understand that there is 𝗻𝗼 𝘀𝗶𝗻𝗴𝗹𝗲 𝗯𝗹𝘂𝗲𝗽𝗿𝗶𝗻𝘁 to add the mentioned agency to your RAG system and you should adapt to your use case. My advice is to not get stuck on terminology and think about engineering flows. Let’s explore some of the moving pieces in Agentic RAG: 𝟭. Analysis of the user query: we pass the original user query to a LLM based Agent for analysis. This is where: 
- The original query can be rewritten, sometimes multiple times to create either a single or multiple queries to be passed down the pipeline. 
- The agent decides if additional data sources are required to answer the query. 
𝟮. If additional data is required, the Retrieval step is triggered. In Agentic RAG case, we could have a single or multiple agents responsible for figuring out what data sources should be tapped into, few examples: 
- Real time user data. This is a pretty cool concept as we might have some real time information like current location available for the user. 
- Internal documents that a user might be interested in. 
- Data available on the web. 
𝟯. If there is no need for additional data, we try to compose the answer (or multiple answers) straight via an LLM. 
𝟰. The answer (or answers) get analyzed, summarized and evaluated for correctness and relevance: 
- If the Agent decides that the answer is good enough, it gets returned to the user. 
- If the Agent decides that the answer needs improvement, we try to rewrite the usr query and repeat the generation loop. 

The real power of Agentic RAG lies in its ability to perform additional routing pre and post generation, handle multiple distinct data sources for retrieval if it is needed and recover from failures in generating correct answers. What are your thoughts on Agentic RAG? Let me know in the comments! 

![图像](https://pbs.twimg.com/media/Gc_Wr6JXcAAMPEG?format=jpg&amp;name=small)

。</description><guid isPermaLink="true">https://winnerineast.github.io/post/What%20is%20%F0%9D%97%94%F0%9D%97%B4%F0%9D%97%B2%F0%9D%97%BB%F0%9D%98%81%F0%9D%97%B6%F0%9D%97%B0%20%F0%9D%97%A5%F0%9D%97%94%F0%9D%97%9A.html</guid><pubDate>Sat, 12 Jul 2025 12:04:44 +0000</pubDate></item><item><title>Reliable Agentic RAG with LLM Trustworthiness Estimates</title><link>https://winnerineast.github.io/post/Reliable%20Agentic%20RAG%20with%20LLM%20Trustworthiness%20Estimates.html</link><description>September 12, 2024

- ![Chris Mauck](https://cleanlab.ai/_next/static/images/chris-2be9b6d6c9460c74034608339ff17c6d.jpg)Chris Mauck
- ![Jonas Mueller](https://cleanlab.ai/_next/static/images/jonas-038f0156ce880eb9cff38bb91618ea1b.jpg)Jonas Mueller

This article demonstrates an agentic system to ensure reliable answers in Retrieval-Augmented Generation, while also ensuring that **latency and compute costs do not exceed the processing needed to accurately respond to complex queries**. Our system relies on _trustworthiness scores_ for LLM outputs, in order to dynamically adjust retrieval strategies until sufficient context has been retrieved to generate a trustworthy RAG answer.

![Diagram of Agentic RAG with trustworthiness scores](https://cleanlab.ai/_next/static/images/RAG_diagram-cb17a3bb114e546c10eb3e8ddc68a415.png)

Based on the trustworthiness score for a candidate response, the RAG Agent can choose more complex retrieval plans or approve the response for production.

## Introduction

Retrieval-Augmented Generation (RAG) combines the strengths of large language models (LLMs) with powerful retrieval systems to generate more accurate responses grounded in knowledge databases. Simple RAG systems retrieve relevant information to a query via semantic search based on vector embeddings of query and database contents, but this strategy fails for more complex queries.

_Agentic RAG_ considers various Retrieval strategies as tools available to an LLM orchestrator that can iteratively decide which tools to call next based on what it’s seen thus far. This Agent can plan, execute, and refine multi-step retrieval processes, but it is critical to ensure latency and compute costs do not exceed what is required to produce a good answer for a user’s query. Despite advancements from LLMs → RAG → Agentic RAG with sophisticated Retrieval strategies, AI-generated responses still suffer from hallucinations today, producing incorrect or nonsensical information with unwarranted confidence.

This blog outlines an Agentic RAG system that can produce trustworthy answers even for complex queries, in a manner that keeps latency/costs in check. Our system relies on the [Trustworthy Language Model](https://cleanlab.ai/blog/trustworthy-language-model/) to score the trustworthiness of a candidate response (based on the query and currently retrieved context). When the current response is deemed untrustworthy, the Agent is tasked with orchestrating a better Retrieval strategy to improve the context. This system starts with cheaper Retrieval strategies, and dynamically tries strategies with greater runtime/costs **only for complex queries where they are necessary to produce a trustworthy RAG answer**.

## Trustworthy Language Model (TLM)

For a given user query, the RAG system will retrieve relevant context, which is then fed into a LLM to produce the response. _But how do we know when the response is untrustworthy_? For instance, here is question incorrectly answered by ChatGPT with no indication it should not be trusted.

![ChatGPT giving an incorrect answer](https://cleanlab.ai/_next/static/images/gpt-367eda0e9cc624b7c3497ea417db378b.png)

TLM automates this determination, by producing a trustworthiness score (between 0-1) for responses from any LLM. For the above prompt &amp; ChatGPT response:

```text
tlm.get_trustworthiness_score(prompt, response) = 0.413
```

indicating this response should not be trusted.

These scores [have been found](https://cleanlab.ai/blog/trustworthy-language-model/) to detect hallucinations and LLM errors with greater precision/recall than alternative approaches like asking the LLM to evaluate its own output or relying on token-probabilities. TLM internally estimates aleatoric and epistemic uncertainty of the LLM by combining techniques including self-reflection, probabilistic prediction, and observed consistency. You can [present](https://help.cleanlab.ai/tutorials/tlm_rag/) TLM trustworthiness scores to users of your RAG system to automatically help them understand which responses warrant further scrutiny.

## Utilizing the trustworthiness score in Agentic RAG

A user’s query is processed by our RAG system as follows: the Retrieval Planner Agent orchestrates a series of Retrieval strategies in order to discover relevant context, that when appended to the query, leads to an LLM response with sufficiently high trustworthiness score. The Agent is encouraged to start with faster/cheaper Retrieval strategies and only escalate to more complex Retrieval when a high trustworthiness score has not yet been achieved. As soon as a trustworthy LLM response is produced, it is returned to the user.

This high-level system can work with many types of Retrieval Planner Agent implementations (e.g. via frameworks like LangGraph and tool-use algorithms like OpenAI Function Calling), as well as all sorts of Retrieval strategies. The goal is to minimize the runtime and costs required to process most queries, while still being able to produce trustworthy responses for complex queries that necessitate more compute.

### Potential Retrieval Strategies

As a concrete example, our Retrieval Planner Agent might choose from the following Retrieval strategies, increasing in time and compute complexity:

1. No Retrieval

- Complexity: _None_
- The query is answerable with general knowledge the LLM already knows.

2. Semantic Search (vector embedding similarity)

- Complexity: _Low_
- Vector database (Pinecone, Qdrant, Weaviate, etc.) is searched using top similarities in space of embeddings (Sentence Transformers, Voyage, etc.)

3. [Hybrid Search (vector + keyword search) with Reciprocal Rank Fusion](https://www.assembled.com/blog/better-rag-results-with-reciprocal-rank-fusion-and-hybrid-search)

- Complexity: _Low/Medium_
- Knowledge database is searched via a combination of vector similarity and classical keyword search like BM25, with results rankings from different searches aggregated via the RRF method.

4. [Re-Ranking](https://adasci.org/a-hands-on-guide-to-enhance-rag-with-re-ranking/) retrieved results

- Complexity: _Medium_
- A specialized re-ranker model is applied to the retrieved results from either vector or keyword search that more accurately estimates which ones are relevant to the query.

5. [Query Expansion](https://docs.llamaindex.ai/en/stable/examples/query_transformations/query_transform_cookbook/)

- Complexity: _Medium/High_
- User query is rewritten into possibly multiple queries before (possibly multiple steps of) Retrieval. This includes entity recognition, separate keyword searches, and methods like [Hypothetical Document Embeddings (Hyde)](https://arxiv.org/abs/2212.10496) or [Step-Back Prompting](https://arxiv.org/abs/2310.06117).

6. Chunk/Document Expansion ([Multi-Hop RAG](https://cobusgreyling.medium.com/multihop-rag-1c695794eeda), [GraphRAG](https://neo4j.com/blog/graphrag-manifesto/))

- Complexity: _Medium/High_
- Returned chunks from the vector database search are expanded by referring to the original document from which they came and traversing related documents or Knowledge Graphs like Neo4j. This may be required to find additional information that is needed for the retrieved context to be useful.

## Examples of our Trustworthy Agentic RAG in action

To make things more concrete, we consider a RAG application intended to answer questions based on Nvidia’s product documentation.

### Simple Query

Let’s first consider a simple query that a user may pose:

&gt; **Query:** _Which component of a computer is responsible for graphics rendering?_

On the first pass, our RAG Agent chooses the least complex retrieval plan: do not retrieve anything. The response and associated trustworthiness score are:

&gt; **Response:** The component of a computer responsible for graphics rendering is the Graphics Processing Unit (GPU).
&gt; 
&gt; **Trustworthiness Score:** 0.986

In this case, the RAG Agent determines the response to be trustworthy and approves the response to be used downstream.

### Complex Query

Now for a more complex query:

&gt; **Query:** _How many NVIDIA CUDA Cores does the RTX 4090 have?_

Our RAG Agent might again initially choose to not retrieve anything, yielding:

&gt; **Response:** As of my last update in October 2022, NVIDIA has not released an RTX 4090 graphics card. Therefore, there are no official specifications.
&gt; 
&gt; **Trustworthiness Score:** 0.725

It appears that the LLM used does not have access to this knowledge. This is quantified by the trustworthiness score, enabling our system to determine this is not a reliable response and then to automatically employ a more complex retrieval plan: vector embedding search. On the second pass, the context, response, and trustworthiness score are:

&gt; **Retrieved Context:**
&gt; 
&gt; GeForce RTX 4090 GPU Engine Specs: NVIDIA CUDA Cores 16384 Shader Cores Ada Lovelace 83 TFLOPS Ray Tracing Cores 3rd Generation 191 TFLOPS Tensor Cores (AI) 4th Generation 1321 AI TOPS Boost Clock (GHz) 2.52 Base Clock (GHz) 2.23
&gt; 
&gt; **Response:** The NVIDIA GeForce RTX 4090 features 16,384 CUDA cores.
&gt; 
&gt; **Trustworthiness Score:** 0.988

Nice! The RAG Agent was able to dynamically up the complexity of the retrieval plan and now has a satisfactory answer with a high trustworthiness score.

### More Complex Query

Let’s consider a more complex query:

&gt; **Query:** _What were the key design challenges faced by NVIDIA in developing the RTX 4090, and how were they overcome?_

Our RAG Agent might again initially chooses to not retrieve anything, yielding:

&gt; **Response:** The NVIDIA RTX 4090 was developed to push the boundaries of GPU performance, requiring significant advancements in architecture, thermal management, and power efficiency.
&gt; 
&gt; **Trustworthiness Score:** 0.635

TLM identifies this response is generic and not confidently containing the right information. In the next pass, our RAG Agent might opt for vector similarity search again, yielding:

&gt; **Retrieved Context:** NVIDIA’s RTX 4090 was anticipated to be a major leap in GPU technology. There were discussions about improving overall architecture and enhancing ray tracing capabilities. However, specific details about the challenges during its development are scarce. Some sources suggest that NVIDIA focused on maximizing performance for gaming and AI applications, but there is little concrete information on the exact hurdles faced.
&gt; 
&gt; **Response:** The NVIDIA RTX 4090 focused on improving performance and ray tracing capabilities, but specific details about the challenges encountered during development are not well-documented. It is believed that NVIDIA prioritized enhancements in gaming and AI, but the exact difficulties they faced remain unclear.
&gt; 
&gt; **Trustworthiness Score:** 0.805

In this pass, our RAG Agent retrieved unsatisfactory information. The corresponding moderate trustworthiness score reflects the lack of specific context. Our RAG Agent thus considers another Retrieval pass with a more complex Hybrid search strategy, yielding:

&gt; **Retrieved Context:** The RTX 4090’s development saw NVIDIA addressing several engineering hurdles. The thermal challenges were exacerbated by the sheer density of the CUDA cores, necessitating an innovative cooling solution. NVIDIA introduced a new fan design and a larger vapor chamber to dissipate heat more effectively. On the power side, the 4090 required a new power connector standard, the PCIe Gen 5 16-pin, which allowed for higher wattage delivery, ensuring stable operation under load. For AI integration, NVIDIA refined its Tensor Core technology to balance power and performance, ensuring that the 4090 could handle advanced AI workloads without bottlenecking other processes.
&gt; 
&gt; **Response:** NVIDIA’s RTX 4090 development involved overcoming several key challenges, particularly around thermal management and power delivery. The GPU’s high density of 16,384 CUDA cores required an innovative cooling system, leading to the introduction of a new fan design and larger vapor chamber. Additionally, the need for higher power delivery led to the adoption of the PCIe Gen 5 16-pin connector. To integrate AI features effectively, NVIDIA refined its Tensor Core technology, balancing power and performance to handle advanced AI workloads efficiently.
&gt; 
&gt; **Trustworthiness Score:** 0.975

With the expanded context, the RAG Agent produces a highly detailed and specific response that earns a high enough trustworthiness score to return to the user. That said, this higher quality answer did require additional time/costs to produce.

The same process continues for queries with greater levels of complexity. Our RAG Agent continues escalating Retrieval strategies until the trustworthiness score indicates a reliable response, or the maximum time limit is reached. If no Retrieval strategy yields a trustworthy LLM response, then our system responds that it cannot handle this question without additional clarifications/information.

## Wrap Up

Integrating the Trustworthy Language Model enables Agentic RAG systems that can ensure accurate answers to complex queries while bounding latency/costs for regular queries. You can adopt this approach to navigate the delicate balance between speed, cost, and accuracy across diverse RAG applications—from customer service to specialized fields like finance, law, and medicine.

While traditional RAG systems generate responses of unknown quality based on predefined steps to process every query, **the future of AI lies in systems that assess response trustworthiness and adapt processing plans to each query’s complexity**. Agentic RAG with the TLM offers a promising step toward this future of _reliable_ AI.

## Next Steps

1. Get started with the [TLM tutorials](https://help.cleanlab.ai/tutorials/tlm/).
2. Try it instantly via the [TLM Playground](https://tlm.cleanlab.ai/).
3. Read [benchmarks](https://cleanlab.ai/blog/trustworthy-language-model/) measuring the effectiveness of LLM trustworthiness scores.。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Reliable%20Agentic%20RAG%20with%20LLM%20Trustworthiness%20Estimates.html</guid><pubDate>Sat, 12 Jul 2025 12:04:23 +0000</pubDate></item><item><title>RAG 实战分享  - 50-60GB PDF 文件, 6000 篇医学论文, 能做 RAG 吗</title><link>https://winnerineast.github.io/post/RAG%20-shi-zhan-fen-xiang-%20%20-%2050-60GB%20PDF%20-wen-jian-%2C%206000%20-pian-yi-xue-lun-wen-%2C%20-neng-zuo-%20RAG%20-ma.html</link><description>作者 Scott 是微软开发者社区 VP, 这应该也是他在开发者中遇到的实际问题, 这个问题的讨论非常激烈。</description><guid isPermaLink="true">https://winnerineast.github.io/post/RAG%20-shi-zhan-fen-xiang-%20%20-%2050-60GB%20PDF%20-wen-jian-%2C%206000%20-pian-yi-xue-lun-wen-%2C%20-neng-zuo-%20RAG%20-ma.html</guid><pubDate>Sat, 12 Jul 2025 12:03:42 +0000</pubDate></item><item><title>Optimizing ColPali for Retrieval at Scale, 13x Faster Results</title><link>https://winnerineast.github.io/post/Optimizing%20ColPali%20for%20Retrieval%20at%20Scale%2C%2013x%20Faster%20Results.html</link><description>
ColPali is a fascinating leap in document retrieval. Its precision in handling visually rich PDFs is phenomenal, but scaling it to handle real-world datasets comes with its share of computational challenges.

Here’s how we solved these challenges to make ColPali 13x faster without sacrificing the precision it’s known for.

## [](https://qdrant.tech/blog/colpali-qdrant-optimization/#the-scaling-dilemma)The Scaling Dilemma

ColPali generates **1,030 vectors for just one page of a PDF.** While this is manageable for small-scale tasks, in a real-world production setting where you may need to store hundreds od thousands of PDFs, the challenge of scaling becomes significant.

Consider this scenario:

- **Dataset Size:** 20,000 PDF pages.
- **Number of Vectors:** Each page generates ~1,000 vectors of 128 dimensions.

The total number of comparisons is calculated as:

1,000⋅1,000⋅20,000⋅128=2.56×1012 comparisons!

That’s trillions of comparisons needed to build the index. Even advanced indexing algorithms like **HNSW** struggle with this scale, as computational costs grow quadratically with amount of multivectors per page.

We turned to a hybrid optimization strategy combining **pooling** (to reduce computational overhead) and **reranking** (to preserve accuracy).

Before we go any deeper, watch our [Webinar video](https://www.youtube.com/live/_h6SN1WwnLs?si=n8gwiIjJ5dnfucXC) for the full demo walkthrough.

For those eager to explore, the [codebase is available here](https://github.com/qdrant/demo-colpali-optimized).

## [](https://qdrant.tech/blog/colpali-qdrant-optimization/#two-stage-retrieval-process)Two-Stage Retrieval Process

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#pooling)Pooling

Pooling is well-known in machine learning as a way to compress data while keeping important information. For ColPali, we reduced 1,030 vectors per page to just 38 vectors by pooling rows in the document’s 32x32 grid.

![](https://qdrant.tech/blog/colpali-optimization/rows.png)

Max and mean pooling are the two most popular types, so we decided to test both approaches on the rows of the grid. Likewise, we could apply pooling on columns, which we plan to explore in the future.

- **Mean Pooling:** Averages values across rows.
- **Max Pooling:** Selects the maximum value for each feature.

32 vectors represent the pooled rows, while 6 vectors encode contextual information derived from ColPali’s special tokens (e.g., for the beginning of the sequence, and task-specific instructions like “Describe the image”).

For our experiments, we chose to preserve these 6 additional vectors.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#the-colpali-as-a-reranker-experiment)The “ColPali as a Reranker” Experiment

Pooling drastically reduces retrieval costs, but there’s a risk of losing fine-grained precision. To address this, we implemented a **two-stage retrieval system**, where embeddings generated with ColPali were max/mean pooled by grid rows to create lightweight vectors for the initial retrieval stage, followed by reranking with the original high-resolution embeddings:

1. **Pooled Retrieval:** Quickly retrieves the top 200 candidates using lightweight pooled embeddings.
2. **Full Reranking:** Refines these candidates using the original, high-resolution embeddings, delivering the final top 20 results.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#implementation)Implementation

We created a custom dataset with over 20,000 unique PDF pages by merging:

- **ViDoRe Benchmark:** Designed for PDF documents retrieval evaluation.
- **UFO Dataset:** Visually rich documents paired with synthetic queries [generated by Daniel van Strien](https://huggingface.co/datasets/davanstrien/ufo-ColPali).
- **DocVQA Dataset:** A large set of document-derived Q&amp;A pairs.

Each document was processed into 32x32 grids, generating both full-resolution and pooled embeddings. **Full-resolution** embeddings consisted of 1,030 vectors per page, while **pooled embeddings** included mean and max pooling variants.

All embeddings were were stored and kept in RAM to avoid caching effects during retrieval speed experiments.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#experiment-setup)Experiment Setup

We evaluated retrieval quality with 1,000 queries. First, pooled embeddings retrieved the top 200 candidates. Then, full-resolution embeddings reranked them to produce the final top 20 results.

To measure performance, we used:

- **NDCG@20:** Measures ranking quality (how well the top results align with expectations).
- **Recall@20:** Measures the overlap between this method and the original ColPali retrieval.

## [](https://qdrant.tech/blog/colpali-qdrant-optimization/#results)Results

The experiment showed promising improvements in speed and accuracy. Retrieval time improved **13x** compared to using full-resolution embeddings alone.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#metrics)Metrics

|Pooling Type|NDCG@20|Recall@20|
|---|---|---|
|**Mean**|0.952|0.917|
|**Max**|0.759|0.656|

Mean pooling preserved nearly identical quality to the original ColPali, with NDCG@20 = 0.952 and Recall@20 = 0.917. Max pooling did not perform well enough to be considered viable since it sacrificed significant accuracy without delivering a meaningful speed advantage.

## [](https://qdrant.tech/blog/colpali-qdrant-optimization/#whats-next)What’s Next?

Future experiments could push these results even further:

- Investigating column-wise pooling for additional compression.
- Testing half-precision (float16) vectors to balance memory use and speed.
- Skipping special multivectors during prefetch to streamline retrieval.
- Combining quantization with oversampling for even faster search.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#try-it-yourself)Try It Yourself

Curious to see this in action? Explore the full codebase and experiment with ColPali optimizations:

- **Demo Notebook:** [GitHub Repository](https://github.com/qdrant/demo-colpali-optimized)
- **Webinar Walkthrough:** [Watch Here](https://www.youtube.com/live/_h6SN1WwnLs?si=n8gwiIjJ5dnfucXC)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Optimizing%20ColPali%20for%20Retrieval%20at%20Scale%2C%2013x%20Faster%20Results.html</guid><pubDate>Sat, 12 Jul 2025 12:03:14 +0000</pubDate></item><item><title>MUVERA-让多向量检索与单向量搜索一样快</title><link>https://winnerineast.github.io/post/MUVERA--rang-duo-xiang-liang-jian-suo-yu-dan-xiang-liang-sou-suo-yi-yang-kuai.html</link><description>做RAG的朋友一定要看看 Google 这个新论文——MUVERA：让多向量检索与单向量搜索一样快 大家在RAG的检索内容过程都会遇到这种情况，如果用传统搜索（例如ElasticSearch），文档 = 1 个向量 → 快速但不准确。</description><guid isPermaLink="true">https://winnerineast.github.io/post/MUVERA--rang-duo-xiang-liang-jian-suo-yu-dan-xiang-liang-sou-suo-yi-yang-kuai.html</guid><pubDate>Sat, 12 Jul 2025 12:02:17 +0000</pubDate></item><item><title>Deep Research,  WebDancer,  WebSailor</title><link>https://winnerineast.github.io/post/Deep%20Research%2C%20%20WebDancer%2C%20%20WebSailor.html</link><description>
- 问：“一部知名电视剧：女二 1993 年入行；女一现任丈夫是浙江湖州人；男一六年后登上春晚。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Deep%20Research%2C%20%20WebDancer%2C%20%20WebSailor.html</guid><pubDate>Sat, 12 Jul 2025 12:01:43 +0000</pubDate></item><item><title>Building effective agents</title><link>https://winnerineast.github.io/post/Building%20effective%20agents.html</link><description>Over the past year, we've worked with dozens of teams building large language model (LLM) agents across industries. Consistently, the most successful implementations weren't using complex frameworks or specialized libraries. Instead, they were building with simple, composable patterns.

In this post, we share what we’ve learned from working with our customers and building agents ourselves, and give practical advice for developers on building effective agents.

## What are agents?

'Agent' can be defined in several ways. Some customers define agents as fully autonomous systems that operate independently over extended periods, using various tools to accomplish complex tasks. Others use the term to describe more prescriptive implementations that follow predefined workflows. At Anthropic, we categorize all these variations as **agentic systems**, but draw an important architectural distinction between **workflows** and **agents**:

- **Workflows** are systems where LLMs and tools are orchestrated through predefined code paths.
- **Agents**, on the other hand, are systems where LLMs dynamically direct their own processes and tool usage, maintaining control over how they accomplish tasks.

Below, we will explore both types of agentic systems in detail. In Appendix 1 (“Agents in Practice”), we describe two domains where customers have found particular value in using these kinds of systems.

## When (and when not) to use agents

When building applications with LLMs, we recommend finding the simplest solution possible, and only increasing complexity when needed. This might mean not building agentic systems at all. Agentic systems often trade latency and cost for better task performance, and you should consider when this tradeoff makes sense.

When more complexity is warranted, workflows offer predictability and consistency for well-defined tasks, whereas agents are the better option when flexibility and model-driven decision-making are needed at scale. For many applications, however, optimizing single LLM calls with retrieval and in-context examples is usually enough.

## When and how to use frameworks

There are many frameworks that make agentic systems easier to implement, including:

- [LangGraph](https://langchain-ai.github.io/langgraph/) from LangChain;
- Amazon Bedrock's [AI Agent framework](https://aws.amazon.com/bedrock/agents/);
- [Rivet](https://rivet.ironcladapp.com/), a drag and drop GUI LLM workflow builder; and
- [Vellum](https://www.vellum.ai/), another GUI tool for building and testing complex workflows.

These frameworks make it easy to get started by simplifying standard low-level tasks like calling LLMs, defining and parsing tools, and chaining calls together. However, they often create extra layers of abstraction that can obscure the underlying prompts ​​and responses, making them harder to debug. They can also make it tempting to add complexity when a simpler setup would suffice.

We suggest that developers start by using LLM APIs directly: many patterns can be implemented in a few lines of code. If you do use a framework, ensure you understand the underlying code. Incorrect assumptions about what's under the hood are a common source of customer error.

See our [cookbook](https://github.com/anthropics/anthropic-cookbook/tree/main/patterns/agents) for some sample implementations.

## Building blocks, workflows, and agents

In this section, we’ll explore the common patterns for agentic systems we’ve seen in production. We'll start with our foundational building block—the augmented LLM—and progressively increase complexity, from simple compositional workflows to autonomous agents.

### Building block: The augmented LLM

The basic building block of agentic systems is an LLM enhanced with augmentations such as retrieval, tools, and memory. Our current models can actively use these capabilities—generating their own search queries, selecting appropriate tools, and determining what information to retain.

We recommend focusing on two key aspects of the implementation: tailoring these capabilities to your specific use case and ensuring they provide an easy, well-documented interface for your LLM. While there are many ways to implement these augmentations, one approach is through our recently released [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol), which allows developers to integrate with a growing ecosystem of third-party tools with a simple [client implementation](https://modelcontextprotocol.io/tutorials/building-a-client#building-mcp-clients).

For the remainder of this post, we'll assume each LLM call has access to these augmented capabilities.

### Workflow: Prompt chaining

Prompt chaining decomposes a task into a sequence of steps, where each LLM call processes the output of the previous one. You can add programmatic checks (see 'gate” in the diagram below) on any intermediate steps to ensure that the process is still on track.

**When to use this workflow:** This workflow is ideal for situations where the task can be easily and cleanly decomposed into fixed subtasks. The main goal is to trade off latency for higher accuracy, by making each LLM call an easier task.

**Examples where prompt chaining is useful:**

- Generating Marketing copy, then translating it into a different language.
- Writing an outline of a document, checking that the outline meets certain criteria, then writing the document based on the outline.

### Workflow: Routing

Routing classifies an input and directs it to a specialized followup task. This workflow allows for separation of concerns, and building more specialized prompts. Without this workflow, optimizing for one kind of input can hurt performance on other inputs.

**When to use this workflow:** Routing works well for complex tasks where there are distinct categories that are better handled separately, and where classification can be handled accurately, either by an LLM or a more traditional classification model/algorithm.

**Examples where routing is useful:**

- Directing different types of customer service queries (general questions, refund requests, technical support) into different downstream processes, prompts, and tools.
- Routing easy/common questions to smaller models like Claude 3.5 Haiku and hard/unusual questions to more capable models like Claude 3.5 Sonnet to optimize cost and speed.

### Workflow: Parallelization

LLMs can sometimes work simultaneously on a task and have their outputs aggregated programmatically. This workflow, parallelization, manifests in two key variations:

- **Sectioning**: Breaking a task into independent subtasks run in parallel.
- **Voting:** Running the same task multiple times to get diverse outputs.

**When to use this workflow:** Parallelization is effective when the divided subtasks can be parallelized for speed, or when multiple perspectives or attempts are needed for higher confidence results. For complex tasks with multiple considerations, LLMs generally perform better when each consideration is handled by a separate LLM call, allowing focused attention on each specific aspect.

**Examples where parallelization is useful:**

- **Sectioning**:
- Implementing guardrails where one model instance processes user queries while another screens them for inappropriate content or requests. This tends to perform better than having the same LLM call handle both guardrails and the core response.
- Automating evals for evaluating LLM performance, where each LLM call evaluates a different aspect of the model’s performance on a given prompt.
- **Voting**:
- Reviewing a piece of code for vulnerabilities, where several different prompts review and flag the code if they find a problem.
- Evaluating whether a given piece of content is inappropriate, with multiple prompts evaluating different aspects or requiring different vote thresholds to balance false positives and negatives.

### Workflow: Orchestrator-workers

In the orchestrator-workers workflow, a central LLM dynamically breaks down tasks, delegates them to worker LLMs, and synthesizes their results.

**When to use this workflow:** This workflow is well-suited for complex tasks where you can’t predict the subtasks needed (in coding, for example, the number of files that need to be changed and the nature of the change in each file likely depend on the task). Whereas it’s topographically similar, the key difference from parallelization is its flexibility—subtasks aren't pre-defined, but determined by the orchestrator based on the specific input.

**Example where orchestrator-workers is useful:**

- Coding products that make complex changes to multiple files each time.
- Search tasks that involve gathering and analyzing information from multiple sources for possible relevant information.

### Workflow: Evaluator-optimizer

In the evaluator-optimizer workflow, one LLM call generates a response while another provides evaluation and feedback in a loop.

**When to use this workflow:** This workflow is particularly effective when we have clear evaluation criteria, and when iterative refinement provides measurable value. The two signs of good fit are, first, that LLM responses can be demonstrably improved when a human articulates their feedback; and second, that the LLM can provide such feedback. This is analogous to the iterative writing process a human writer might go through when producing a polished document.

**Examples where evaluator-optimizer is useful:**

- Literary translation where there are nuances that the translator LLM might not capture initially, but where an evaluator LLM can provide useful critiques.
- Complex search tasks that require multiple rounds of searching and analysis to gather comprehensive information, where the evaluator decides whether further searches are warranted.

### Agents

Agents are emerging in production as LLMs mature in key capabilities—understanding complex inputs, engaging in reasoning and planning, using tools reliably, and recovering from errors. Agents begin their work with either a command from, or interactive discussion with, the human user. Once the task is clear, agents plan and operate independently, potentially returning to the human for further information or judgement. During execution, it's crucial for the agents to gain “ground truth” from the environment at each step (such as tool call results or code execution) to assess its progress. Agents can then pause for human feedback at checkpoints or when encountering blockers. The task often terminates upon completion, but it’s also common to include stopping conditions (such as a maximum number of iterations) to maintain control.

Agents can handle sophisticated tasks, but their implementation is often straightforward. They are typically just LLMs using tools based on environmental feedback in a loop. It is therefore crucial to design toolsets and their documentation clearly and thoughtfully. We expand on best practices for tool development in Appendix 2 ('Prompt Engineering your Tools').

**When to use agents:** Agents can be used for open-ended problems where it’s difficult or impossible to predict the required number of steps, and where you can’t hardcode a fixed path. The LLM will potentially operate for many turns, and you must have some level of trust in its decision-making. Agents' autonomy makes them ideal for scaling tasks in trusted environments.

The autonomous nature of agents means higher costs, and the potential for compounding errors. We recommend extensive testing in sandboxed environments, along with the appropriate guardrails.

**Examples where agents are useful:**

The following examples are from our own implementations:

- A coding Agent to resolve [SWE-bench tasks](https://www.anthropic.com/research/swe-bench-sonnet), which involve edits to many files based on a task description;
- Our [“computer use” reference implementation](https://github.com/anthropics/anthropic-quickstarts/tree/main/computer-use-demo), where Claude uses a computer to accomplish tasks.

## Combining and customizing these patterns

These building blocks aren't prescriptive. They're common patterns that developers can shape and combine to fit different use cases. The key to success, as with any LLM features, is measuring performance and iterating on implementations. To repeat: you should consider adding complexity *only* when it demonstrably improves outcomes.

## Summary

Success in the LLM space isn't about building the most sophisticated system. It's about building the *right* system for your needs. Start with simple prompts, optimize them with comprehensive evaluation, and add multi-step agentic systems only when simpler solutions fall short.

When implementing agents, we try to follow three core principles:

1. Maintain **simplicity** in your agent's design.
2. Prioritize **transparency** by explicitly showing the agent’s planning steps.
3. Carefully craft your agent-computer interface (ACI) through thorough tool **documentation and testing**.

Frameworks can help you get started quickly, but don't hesitate to reduce abstraction layers and build with basic components as you move to production. By following these principles, you can create agents that are not only powerful but also reliable, maintainable, and trusted by their users.

### Acknowledgements

Written by Erik Schluntz and Barry Zhang. This work draws upon our experiences building agents at Anthropic and the valuable insights shared by our customers, for which we're deeply grateful.

## Appendix 1: Agents in practice

Our work with customers has revealed two particularly promising applications for AI agents that demonstrate the practical value of the patterns discussed above. Both applications illustrate how agents add the most value for tasks that require both conversation and action, have clear success criteria, enable feedback loops, and integrate meaningful human oversight.

### A. Customer support

Customer support combines familiar chatbot interfaces with enhanced capabilities through tool integration. This is a natural fit for more open-ended agents because:

- Support interactions naturally follow a conversation flow while requiring access to external information and actions;
- Tools can be integrated to pull customer data, order history, and knowledge base articles;
- Actions such as issuing refunds or updating tickets can be handled programmatically; and
- Success can be clearly measured through user-defined resolutions.

Several companies have demonstrated the viability of this approach through usage-based pricing models that charge only for successful resolutions, showing confidence in their agents' effectiveness.

### B. Coding agents

The software development space has shown remarkable potential for LLM features, with capabilities evolving from code completion to autonomous problem-solving. Agents are particularly effective because:

- Code solutions are verifiable through automated tests;
- Agents can iterate on solutions using test results as feedback;
- The problem space is well-defined and structured; and
- Output quality can be measured objectively.

In our own implementation, agents can now solve real GitHub issues in the [SWE-bench Verified](https://www.anthropic.com/research/swe-bench-sonnet) benchmark based on the pull request description alone. However, whereas automated testing helps verify functionality, human review remains crucial for ensuring solutions align with broader system requirements.

## Appendix 2: Prompt engineering your tools

No matter which agentic system you're building, tools will likely be an important part of your agent. [Tools](https://www.anthropic.com/news/tool-use-ga) enable Claude to interact with external services and APIs by specifying their exact structure and definition in our API. When Claude responds, it will include a [tool use block](https://docs.anthropic.com/en/docs/build-with-claude/tool-use#example-api-response-with-a-tool-use-content-block) in the API response if it plans to invoke a tool. Tool definitions and specifications should be given just as much prompt engineering attention as your overall prompts. In this brief appendix, we describe how to prompt engineer your tools.

There are often several ways to specify the same action. For instance, you can specify a file edit by writing a diff, or by rewriting the entire file. For structured output, you can return code inside markdown or inside JSON. In software engineering, differences like these are cosmetic and can be converted losslessly from one to the other. However, some formats are much more difficult for an LLM to write than others. Writing a diff requires knowing how many lines are changing in the chunk header before the new code is written. Writing code inside JSON (compared to markdown) requires extra escaping of newlines and quotes.

Our suggestions for deciding on tool formats are the following:

- Give the model enough tokens to 'think' before it writes itself into a corner.
- Keep the format close to what the model has seen naturally occurring in text on the internet.
- Make sure there's no formatting 'overhead' such as having to keep an accurate count of thousands of lines of code, or string-escaping any code it writes.

One rule of thumb is to think about how much effort goes into human-computer interfaces (HCI), and plan to invest just as much effort in creating good *agent*\-computer interfaces (ACI). Here are some thoughts on how to do so:

- Put yourself in the model's shoes. Is it obvious how to use this tool, based on the description and parameters, or would you need to think carefully about it? If so, then it’s probably also true for the model. A good tool definition often includes example usage, edge cases, input format requirements, and clear boundaries from other tools.
- How can you change parameter names or descriptions to make things more obvious? Think of this as writing a great docstring for a junior developer on your team. This is especially important when using many similar tools.
- Test how the model uses your tools: Run many example inputs in our [workbench](https://console.anthropic.com/workbench) to see what mistakes the model makes, and iterate.
- [Poka-yoke](https://en.wikipedia.org/wiki/Poka-yoke) your tools. Change the arguments so that it is harder to make mistakes.

While building our agent for [SWE-bench](https://www.anthropic.com/research/swe-bench-sonnet), we actually spent more time optimizing our tools than the overall prompt. For example, we found that the model would make mistakes with tools using relative filepaths after the agent had moved out of the root directory. To fix this, we changed the tool to always require absolute filepaths—and we found that the model used this method flawlessly.。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Building%20effective%20agents.html</guid><pubDate>Sat, 12 Jul 2025 12:01:15 +0000</pubDate></item><item><title>AI智慧与检索的巅峰融合：RAG解锁下一代信息生成新架构</title><link>https://winnerineast.github.io/post/AI-zhi-hui-yu-jian-suo-de-dian-feng-rong-he-%EF%BC%9ARAG-jie-suo-xia-yi-dai-xin-xi-sheng-cheng-xin-jia-gou.html</link><description>**GPTDAOCN-e/acc** @GPTDAOCN [2024-12-11](https://x.com/GPTDAOCN/status/1866947666690838557)

AI智慧与检索的巅峰融合：RAG解锁下一代信息生成新架构

这张图展示了'检索增强生成（Retrieval-Augmented Generation，RAG）'技术的不同架构，用来描述如何结合信息检索和生成式AI模型（如GPT）来更好地回答问题或生成内容。</description><guid isPermaLink="true">https://winnerineast.github.io/post/AI-zhi-hui-yu-jian-suo-de-dian-feng-rong-he-%EF%BC%9ARAG-jie-suo-xia-yi-dai-xin-xi-sheng-cheng-xin-jia-gou.html</guid><pubDate>Sat, 12 Jul 2025 12:00:46 +0000</pubDate></item><item><title>【论文推荐】DeepResearch</title><link>https://winnerineast.github.io/post/%E3%80%90-lun-wen-tui-jian-%E3%80%91DeepResearch.html</link><description>（好一些的综述）[https://arxiv.org/abs/2506.18096](https://t.co/KqENoLuAiv) 
（过于求全反而缺乏洞见的综述） [https://arxiv.org/pdf/2506.12594](https://t.co/xeWo94wXZq) 
（评估方法，从报告质量和引用精度两个角度评估）[https://arxiv.org/pdf/2506.11763](https://t.co/vKR0NO4HLO)

（推荐，带UI，字节开源的基于LangGraph的DeepFlow）[https://github.com/bytedance/deer-flow…](https://t.co/EtqKMqlKBf) 
（推荐，带UI，Gemini基于LangGraph的Deep Search实现，比较简单） [https://github.com/google-gemini/gemini-fullstack-langgraph-quickstart…](https://t.co/VTe064Fsx2) 
（没有UI，但是功能比较丰富）[https://github.com/foreveryh/mentis/tree/main/super_agents/deep_research…](https://t.co/9TJy0juGLG)
[](https://t.co/VTe064Fsx2)
（基于smolagents框架，比较简单）[https://github.com/huggingface/smolagents/tree/main/examples/open_deep_research…](https://t.co/9wXwCsbxeL) （基于OpenAI Agents 库实现，比较简单） [https://huggingface.co/spaces/mallocode200/Deep_Research_Assistant/blob/main/research_manager.py](https://t.co/BaoHko5WT9)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/%E3%80%90-lun-wen-tui-jian-%E3%80%91DeepResearch.html</guid><pubDate>Sat, 12 Jul 2025 10:13:59 +0000</pubDate></item></channel></rss>