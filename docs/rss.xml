<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Winnerineast Blog</title><link>https://winnerineast.github.io</link><description>Humachine Studio</description><copyright>Winnerineast Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://winnerineast.github.io</link></image><lastBuildDate>Sat, 12 Jul 2025 12:09:24 +0000</lastBuildDate><managingEditor>Winnerineast Blog</managingEditor><ttl>60</ttl><webMaster>Winnerineast Blog</webMaster><item><title>解构 AI 原生应用 - 企业软件的未来图景</title><link>https://winnerineast.github.io/post/jie-gou-%20AI%20-yuan-sheng-ying-yong-%20-%20-qi-ye-ruan-jian-de-wei-lai-tu-jing.html</link><description>
&lt;img width='2000' height='1125' alt='Image' src='https://github.com/user-attachments/assets/2a7cad0a-f31b-4ff1-b153-7c14a45da4ba' /&gt;

「来自 Sapphire Ventures 的重要文章，通过设计、数据、专业领域、动态特性、商业分发五大维度，探讨 AI 如何从'功能附加'转向'核心驱动'，重塑下一代企业软件的发展方向」 「AI 原生应用的定义」 - AI 是应用的核心体验，而不只是附加功能 - 建立在基础 AI 能力之上 - 能突破传统的速度、规模和成本限制 - 能持续改进和优化 - 包含一定程度的专有 AI 技术 「市场现状」 - 2024年 AI 原生应用的融资达到85亿美元 - 已有至少47家 AI 原生应用公司年收入超过2500万美元 - 预计明年将有同等数量公司年收入超过5000万美元 「评估框架(5个维度)」 A. 设计(Design): - 创建新的交互模式 - 加速反馈循环 - 开发 AI 原生系统架构 B. 数据(Data): - 提高端到端数据管理的严谨性 - 利用潜在数据价值 - 创建新的专有数据集 C. 领域专长(Domain Expertise): - 将特定领域活动转化为 AI 加速的工作流 - 大规模快速合成 - 结合全局和本地知识 D. 动态性(Dynamism): - 实时优化性能与成本权衡 - 创建生成式客户旅程 - 实现多层次超个性化 E. 分发(Distribution): - 增加定价和包装灵活性 - 实现新商业模式。</description><guid isPermaLink="true">https://winnerineast.github.io/post/jie-gou-%20AI%20-yuan-sheng-ying-yong-%20-%20-qi-ye-ruan-jian-de-wei-lai-tu-jing.html</guid><pubDate>Sat, 12 Jul 2025 12:08:55 +0000</pubDate></item><item><title>模型注册表的全景运作</title><link>https://winnerineast.github.io/post/mo-xing-zhu-ce-biao-de-quan-jing-yun-zuo.html</link><description>
揭开MLOps的核心奥秘：模型注册表的全景运作！ 这张图展示了在MLOps（机器学习运维）中，模型注册表如何作为核心环节，协调和管理整个机器学习流水线。</description><guid isPermaLink="true">https://winnerineast.github.io/post/mo-xing-zhu-ce-biao-de-quan-jing-yun-zuo.html</guid><pubDate>Sat, 12 Jul 2025 12:07:45 +0000</pubDate></item><item><title>如何打造属于你的定制化大模型聊天机器人</title><link>https://winnerineast.github.io/post/ru-he-da-zao-shu-yu-ni-de-ding-zhi-hua-da-mo-xing-liao-tian-ji-qi-ren.html</link><description>
1. 文档拆解： - 首先，你得有一些文本资料（Documents）。</description><guid isPermaLink="true">https://winnerineast.github.io/post/ru-he-da-zao-shu-yu-ni-de-ding-zhi-hua-da-mo-xing-liao-tian-ji-qi-ren.html</guid><pubDate>Sat, 12 Jul 2025 12:07:16 +0000</pubDate></item><item><title>全面解码MLOps - 从构想到落地的机器学习之旅</title><link>https://winnerineast.github.io/post/quan-mian-jie-ma-MLOps%20-%20-cong-gou-xiang-dao-luo-di-de-ji-qi-xue-xi-zhi-lv.html</link><description>&lt;img width='1818' height='1892' alt='Image' src='https://github.com/user-attachments/assets/792fc6af-5295-4faa-8570-fb3f33be16d6' /&gt;

这张图展示了一个端到端的MLOps（机器学习运维）架构，分为几个关键步骤和区域。</description><guid isPermaLink="true">https://winnerineast.github.io/post/quan-mian-jie-ma-MLOps%20-%20-cong-gou-xiang-dao-luo-di-de-ji-qi-xue-xi-zhi-lv.html</guid><pubDate>Sat, 12 Jul 2025 12:06:34 +0000</pubDate></item><item><title>五大主流Agentic框架优劣对比分析</title><link>https://winnerineast.github.io/post/wu-da-zhu-liu-Agentic-kuang-jia-you-lie-dui-bi-fen-xi.html</link><description>
「微软、OpenAI 等科技巨头推出的五大多 AI 代理框架各具特色，AutoGen 适合开发、CrewAI 易上手、LangGraph 最灵活、Swarm 最简单、Magnetic-One 较全能，开发者该怎么选呢？」 1. AutoGen

[@pyautogen](https://x.com/pyautogen)

- 优势: - 最早且最流行的框架 - 特别适合软件开发任务 - 有微软强大的社区支持 - 基于用户代理和助手代理的交互模式 - 局限: - 对非程序员不够友好 - 设置复杂,特别是使用本地LLM时 - 在非软件开发任务上表现一般 2. CrewAI

[@crewAIInc](https://x.com/crewAIInc)

- 优势: - 非常直观,主要依赖提示词编写 - 容易创建和添加新代理 - 对非技术用户友好 - 与大多数LLM提供商兼容 - 局限: - 灵活性和自定义性有限 - 主要适合基础用例 - 代理之间的交互存在一些bug - 社区支持有限 3. LangGraph

[@LangChainAI](https://x.com/LangChainAI)

- 优势: - 建立在LangChain之上,基于有向循环图 - 非常灵活和可定制 - 有良好的社区支持 - 可与开源LLM和各种API配合使用 - 局限: - 文档不够完善 - 对非程序员不够友好 - 需要较强的编程技能 4. OpenAI Swarm

[@OpenAIDevs](https://x.com/OpenAIDevs)

- 优势: - 最容易上手的框架 - 简化了代理创建和切换 - 适合快速demo - 局限: - 仅支持OpenAI API - 不适合生产部署 - 灵活性不足 - 社区支持薄弱 5. Magnetic-One (

[@OpenAtMicrosoft](https://x.com/OpenAtMicrosoft)

) - 优势: - 适合非程序员 - 预装5个代理(含1个管理代理) - 建立在AutoGen之上 - 局限: - 开源LLM支持复杂 - 灵活性不足 - 文档和社区支持几乎没有 作者的最终建议: - 软件开发任务选择 AutoGen - 新手入门选择 OpenAI Swarm 或 CrewAI - 复杂任务选择 LangGraph - 开源LLM使用推荐 LangGraph - 社区支持最好的是 AutoGen - 快速启动选择 CrewAI - 成本效益考虑 Magnetic-One。</description><guid isPermaLink="true">https://winnerineast.github.io/post/wu-da-zhu-liu-Agentic-kuang-jia-you-lie-dui-bi-fen-xi.html</guid><pubDate>Sat, 12 Jul 2025 12:05:31 +0000</pubDate></item><item><title>一款PDF转JSON,Markdown的工具：Docling</title><link>https://winnerineast.github.io/post/yi-kuan-PDF-zhuan-JSON%2CMarkdown-de-gong-ju-%EF%BC%9ADocling.html</link><description>支持详细页面布局和阅读顺序理解、表格结构恢复，元数据提取，支持OCR功能，可用于扫描的PDF 

github：[https://github.com/DS4SD/docling](https://t.co/AOYqyN8JN5)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/yi-kuan-PDF-zhuan-JSON%2CMarkdown-de-gong-ju-%EF%BC%9ADocling.html</guid><pubDate>Sat, 12 Jul 2025 12:05:05 +0000</pubDate></item><item><title>Reliable Agentic RAG with LLM Trustworthiness Estimates</title><link>https://winnerineast.github.io/post/Reliable%20Agentic%20RAG%20with%20LLM%20Trustworthiness%20Estimates.html</link><description>September 12, 2024

- ![Chris Mauck](https://cleanlab.ai/_next/static/images/chris-2be9b6d6c9460c74034608339ff17c6d.jpg)Chris Mauck
- ![Jonas Mueller](https://cleanlab.ai/_next/static/images/jonas-038f0156ce880eb9cff38bb91618ea1b.jpg)Jonas Mueller

This article demonstrates an agentic system to ensure reliable answers in Retrieval-Augmented Generation, while also ensuring that **latency and compute costs do not exceed the processing needed to accurately respond to complex queries**. Our system relies on _trustworthiness scores_ for LLM outputs, in order to dynamically adjust retrieval strategies until sufficient context has been retrieved to generate a trustworthy RAG answer.

![Diagram of Agentic RAG with trustworthiness scores](https://cleanlab.ai/_next/static/images/RAG_diagram-cb17a3bb114e546c10eb3e8ddc68a415.png)

Based on the trustworthiness score for a candidate response, the RAG Agent can choose more complex retrieval plans or approve the response for production.

## Introduction

Retrieval-Augmented Generation (RAG) combines the strengths of large language models (LLMs) with powerful retrieval systems to generate more accurate responses grounded in knowledge databases. Simple RAG systems retrieve relevant information to a query via semantic search based on vector embeddings of query and database contents, but this strategy fails for more complex queries.

_Agentic RAG_ considers various Retrieval strategies as tools available to an LLM orchestrator that can iteratively decide which tools to call next based on what it’s seen thus far. This Agent can plan, execute, and refine multi-step retrieval processes, but it is critical to ensure latency and compute costs do not exceed what is required to produce a good answer for a user’s query. Despite advancements from LLMs → RAG → Agentic RAG with sophisticated Retrieval strategies, AI-generated responses still suffer from hallucinations today, producing incorrect or nonsensical information with unwarranted confidence.

This blog outlines an Agentic RAG system that can produce trustworthy answers even for complex queries, in a manner that keeps latency/costs in check. Our system relies on the [Trustworthy Language Model](https://cleanlab.ai/blog/trustworthy-language-model/) to score the trustworthiness of a candidate response (based on the query and currently retrieved context). When the current response is deemed untrustworthy, the Agent is tasked with orchestrating a better Retrieval strategy to improve the context. This system starts with cheaper Retrieval strategies, and dynamically tries strategies with greater runtime/costs **only for complex queries where they are necessary to produce a trustworthy RAG answer**.

## Trustworthy Language Model (TLM)

For a given user query, the RAG system will retrieve relevant context, which is then fed into a LLM to produce the response. _But how do we know when the response is untrustworthy_? For instance, here is question incorrectly answered by ChatGPT with no indication it should not be trusted.

![ChatGPT giving an incorrect answer](https://cleanlab.ai/_next/static/images/gpt-367eda0e9cc624b7c3497ea417db378b.png)

TLM automates this determination, by producing a trustworthiness score (between 0-1) for responses from any LLM. For the above prompt &amp; ChatGPT response:

```text
tlm.get_trustworthiness_score(prompt, response) = 0.413
```

indicating this response should not be trusted.

These scores [have been found](https://cleanlab.ai/blog/trustworthy-language-model/) to detect hallucinations and LLM errors with greater precision/recall than alternative approaches like asking the LLM to evaluate its own output or relying on token-probabilities. TLM internally estimates aleatoric and epistemic uncertainty of the LLM by combining techniques including self-reflection, probabilistic prediction, and observed consistency. You can [present](https://help.cleanlab.ai/tutorials/tlm_rag/) TLM trustworthiness scores to users of your RAG system to automatically help them understand which responses warrant further scrutiny.

## Utilizing the trustworthiness score in Agentic RAG

A user’s query is processed by our RAG system as follows: the Retrieval Planner Agent orchestrates a series of Retrieval strategies in order to discover relevant context, that when appended to the query, leads to an LLM response with sufficiently high trustworthiness score. The Agent is encouraged to start with faster/cheaper Retrieval strategies and only escalate to more complex Retrieval when a high trustworthiness score has not yet been achieved. As soon as a trustworthy LLM response is produced, it is returned to the user.

This high-level system can work with many types of Retrieval Planner Agent implementations (e.g. via frameworks like LangGraph and tool-use algorithms like OpenAI Function Calling), as well as all sorts of Retrieval strategies. The goal is to minimize the runtime and costs required to process most queries, while still being able to produce trustworthy responses for complex queries that necessitate more compute.

### Potential Retrieval Strategies

As a concrete example, our Retrieval Planner Agent might choose from the following Retrieval strategies, increasing in time and compute complexity:

1. No Retrieval

- Complexity: _None_
- The query is answerable with general knowledge the LLM already knows.

2. Semantic Search (vector embedding similarity)

- Complexity: _Low_
- Vector database (Pinecone, Qdrant, Weaviate, etc.) is searched using top similarities in space of embeddings (Sentence Transformers, Voyage, etc.)

3. [Hybrid Search (vector + keyword search) with Reciprocal Rank Fusion](https://www.assembled.com/blog/better-rag-results-with-reciprocal-rank-fusion-and-hybrid-search)

- Complexity: _Low/Medium_
- Knowledge database is searched via a combination of vector similarity and classical keyword search like BM25, with results rankings from different searches aggregated via the RRF method.

4. [Re-Ranking](https://adasci.org/a-hands-on-guide-to-enhance-rag-with-re-ranking/) retrieved results

- Complexity: _Medium_
- A specialized re-ranker model is applied to the retrieved results from either vector or keyword search that more accurately estimates which ones are relevant to the query.

5. [Query Expansion](https://docs.llamaindex.ai/en/stable/examples/query_transformations/query_transform_cookbook/)

- Complexity: _Medium/High_
- User query is rewritten into possibly multiple queries before (possibly multiple steps of) Retrieval. This includes entity recognition, separate keyword searches, and methods like [Hypothetical Document Embeddings (Hyde)](https://arxiv.org/abs/2212.10496) or [Step-Back Prompting](https://arxiv.org/abs/2310.06117).

6. Chunk/Document Expansion ([Multi-Hop RAG](https://cobusgreyling.medium.com/multihop-rag-1c695794eeda), [GraphRAG](https://neo4j.com/blog/graphrag-manifesto/))

- Complexity: _Medium/High_
- Returned chunks from the vector database search are expanded by referring to the original document from which they came and traversing related documents or Knowledge Graphs like Neo4j. This may be required to find additional information that is needed for the retrieved context to be useful.

## Examples of our Trustworthy Agentic RAG in action

To make things more concrete, we consider a RAG application intended to answer questions based on Nvidia’s product documentation.

### Simple Query

Let’s first consider a simple query that a user may pose:

&gt; **Query:** _Which component of a computer is responsible for graphics rendering?_

On the first pass, our RAG Agent chooses the least complex retrieval plan: do not retrieve anything. The response and associated trustworthiness score are:

&gt; **Response:** The component of a computer responsible for graphics rendering is the Graphics Processing Unit (GPU).
&gt; 
&gt; **Trustworthiness Score:** 0.986

In this case, the RAG Agent determines the response to be trustworthy and approves the response to be used downstream.

### Complex Query

Now for a more complex query:

&gt; **Query:** _How many NVIDIA CUDA Cores does the RTX 4090 have?_

Our RAG Agent might again initially choose to not retrieve anything, yielding:

&gt; **Response:** As of my last update in October 2022, NVIDIA has not released an RTX 4090 graphics card. Therefore, there are no official specifications.
&gt; 
&gt; **Trustworthiness Score:** 0.725

It appears that the LLM used does not have access to this knowledge. This is quantified by the trustworthiness score, enabling our system to determine this is not a reliable response and then to automatically employ a more complex retrieval plan: vector embedding search. On the second pass, the context, response, and trustworthiness score are:

&gt; **Retrieved Context:**
&gt; 
&gt; GeForce RTX 4090 GPU Engine Specs: NVIDIA CUDA Cores 16384 Shader Cores Ada Lovelace 83 TFLOPS Ray Tracing Cores 3rd Generation 191 TFLOPS Tensor Cores (AI) 4th Generation 1321 AI TOPS Boost Clock (GHz) 2.52 Base Clock (GHz) 2.23
&gt; 
&gt; **Response:** The NVIDIA GeForce RTX 4090 features 16,384 CUDA cores.
&gt; 
&gt; **Trustworthiness Score:** 0.988

Nice! The RAG Agent was able to dynamically up the complexity of the retrieval plan and now has a satisfactory answer with a high trustworthiness score.

### More Complex Query

Let’s consider a more complex query:

&gt; **Query:** _What were the key design challenges faced by NVIDIA in developing the RTX 4090, and how were they overcome?_

Our RAG Agent might again initially chooses to not retrieve anything, yielding:

&gt; **Response:** The NVIDIA RTX 4090 was developed to push the boundaries of GPU performance, requiring significant advancements in architecture, thermal management, and power efficiency.
&gt; 
&gt; **Trustworthiness Score:** 0.635

TLM identifies this response is generic and not confidently containing the right information. In the next pass, our RAG Agent might opt for vector similarity search again, yielding:

&gt; **Retrieved Context:** NVIDIA’s RTX 4090 was anticipated to be a major leap in GPU technology. There were discussions about improving overall architecture and enhancing ray tracing capabilities. However, specific details about the challenges during its development are scarce. Some sources suggest that NVIDIA focused on maximizing performance for gaming and AI applications, but there is little concrete information on the exact hurdles faced.
&gt; 
&gt; **Response:** The NVIDIA RTX 4090 focused on improving performance and ray tracing capabilities, but specific details about the challenges encountered during development are not well-documented. It is believed that NVIDIA prioritized enhancements in gaming and AI, but the exact difficulties they faced remain unclear.
&gt; 
&gt; **Trustworthiness Score:** 0.805

In this pass, our RAG Agent retrieved unsatisfactory information. The corresponding moderate trustworthiness score reflects the lack of specific context. Our RAG Agent thus considers another Retrieval pass with a more complex Hybrid search strategy, yielding:

&gt; **Retrieved Context:** The RTX 4090’s development saw NVIDIA addressing several engineering hurdles. The thermal challenges were exacerbated by the sheer density of the CUDA cores, necessitating an innovative cooling solution. NVIDIA introduced a new fan design and a larger vapor chamber to dissipate heat more effectively. On the power side, the 4090 required a new power connector standard, the PCIe Gen 5 16-pin, which allowed for higher wattage delivery, ensuring stable operation under load. For AI integration, NVIDIA refined its Tensor Core technology to balance power and performance, ensuring that the 4090 could handle advanced AI workloads without bottlenecking other processes.
&gt; 
&gt; **Response:** NVIDIA’s RTX 4090 development involved overcoming several key challenges, particularly around thermal management and power delivery. The GPU’s high density of 16,384 CUDA cores required an innovative cooling system, leading to the introduction of a new fan design and larger vapor chamber. Additionally, the need for higher power delivery led to the adoption of the PCIe Gen 5 16-pin connector. To integrate AI features effectively, NVIDIA refined its Tensor Core technology, balancing power and performance to handle advanced AI workloads efficiently.
&gt; 
&gt; **Trustworthiness Score:** 0.975

With the expanded context, the RAG Agent produces a highly detailed and specific response that earns a high enough trustworthiness score to return to the user. That said, this higher quality answer did require additional time/costs to produce.

The same process continues for queries with greater levels of complexity. Our RAG Agent continues escalating Retrieval strategies until the trustworthiness score indicates a reliable response, or the maximum time limit is reached. If no Retrieval strategy yields a trustworthy LLM response, then our system responds that it cannot handle this question without additional clarifications/information.

## Wrap Up

Integrating the Trustworthy Language Model enables Agentic RAG systems that can ensure accurate answers to complex queries while bounding latency/costs for regular queries. You can adopt this approach to navigate the delicate balance between speed, cost, and accuracy across diverse RAG applications—from customer service to specialized fields like finance, law, and medicine.

While traditional RAG systems generate responses of unknown quality based on predefined steps to process every query, **the future of AI lies in systems that assess response trustworthiness and adapt processing plans to each query’s complexity**. Agentic RAG with the TLM offers a promising step toward this future of _reliable_ AI.

## Next Steps

1. Get started with the [TLM tutorials](https://help.cleanlab.ai/tutorials/tlm/).
2. Try it instantly via the [TLM Playground](https://tlm.cleanlab.ai/).
3. Read [benchmarks](https://cleanlab.ai/blog/trustworthy-language-model/) measuring the effectiveness of LLM trustworthiness scores.。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Reliable%20Agentic%20RAG%20with%20LLM%20Trustworthiness%20Estimates.html</guid><pubDate>Sat, 12 Jul 2025 12:04:23 +0000</pubDate></item><item><title>RAG 实战分享  - 50-60GB PDF 文件, 6000 篇医学论文, 能做 RAG 吗</title><link>https://winnerineast.github.io/post/RAG%20-shi-zhan-fen-xiang-%20%20-%2050-60GB%20PDF%20-wen-jian-%2C%206000%20-pian-yi-xue-lun-wen-%2C%20-neng-zuo-%20RAG%20-ma.html</link><description>作者 Scott 是微软开发者社区 VP, 这应该也是他在开发者中遇到的实际问题, 这个问题的讨论非常激烈。</description><guid isPermaLink="true">https://winnerineast.github.io/post/RAG%20-shi-zhan-fen-xiang-%20%20-%2050-60GB%20PDF%20-wen-jian-%2C%206000%20-pian-yi-xue-lun-wen-%2C%20-neng-zuo-%20RAG%20-ma.html</guid><pubDate>Sat, 12 Jul 2025 12:03:42 +0000</pubDate></item><item><title>Optimizing ColPali for Retrieval at Scale, 13x Faster Results</title><link>https://winnerineast.github.io/post/Optimizing%20ColPali%20for%20Retrieval%20at%20Scale%2C%2013x%20Faster%20Results.html</link><description>
ColPali is a fascinating leap in document retrieval. Its precision in handling visually rich PDFs is phenomenal, but scaling it to handle real-world datasets comes with its share of computational challenges.

Here’s how we solved these challenges to make ColPali 13x faster without sacrificing the precision it’s known for.

## [](https://qdrant.tech/blog/colpali-qdrant-optimization/#the-scaling-dilemma)The Scaling Dilemma

ColPali generates **1,030 vectors for just one page of a PDF.** While this is manageable for small-scale tasks, in a real-world production setting where you may need to store hundreds od thousands of PDFs, the challenge of scaling becomes significant.

Consider this scenario:

- **Dataset Size:** 20,000 PDF pages.
- **Number of Vectors:** Each page generates ~1,000 vectors of 128 dimensions.

The total number of comparisons is calculated as:

1,000⋅1,000⋅20,000⋅128=2.56×1012 comparisons!

That’s trillions of comparisons needed to build the index. Even advanced indexing algorithms like **HNSW** struggle with this scale, as computational costs grow quadratically with amount of multivectors per page.

We turned to a hybrid optimization strategy combining **pooling** (to reduce computational overhead) and **reranking** (to preserve accuracy).

Before we go any deeper, watch our [Webinar video](https://www.youtube.com/live/_h6SN1WwnLs?si=n8gwiIjJ5dnfucXC) for the full demo walkthrough.

For those eager to explore, the [codebase is available here](https://github.com/qdrant/demo-colpali-optimized).

## [](https://qdrant.tech/blog/colpali-qdrant-optimization/#two-stage-retrieval-process)Two-Stage Retrieval Process

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#pooling)Pooling

Pooling is well-known in machine learning as a way to compress data while keeping important information. For ColPali, we reduced 1,030 vectors per page to just 38 vectors by pooling rows in the document’s 32x32 grid.

![](https://qdrant.tech/blog/colpali-optimization/rows.png)

Max and mean pooling are the two most popular types, so we decided to test both approaches on the rows of the grid. Likewise, we could apply pooling on columns, which we plan to explore in the future.

- **Mean Pooling:** Averages values across rows.
- **Max Pooling:** Selects the maximum value for each feature.

32 vectors represent the pooled rows, while 6 vectors encode contextual information derived from ColPali’s special tokens (e.g., for the beginning of the sequence, and task-specific instructions like “Describe the image”).

For our experiments, we chose to preserve these 6 additional vectors.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#the-colpali-as-a-reranker-experiment)The “ColPali as a Reranker” Experiment

Pooling drastically reduces retrieval costs, but there’s a risk of losing fine-grained precision. To address this, we implemented a **two-stage retrieval system**, where embeddings generated with ColPali were max/mean pooled by grid rows to create lightweight vectors for the initial retrieval stage, followed by reranking with the original high-resolution embeddings:

1. **Pooled Retrieval:** Quickly retrieves the top 200 candidates using lightweight pooled embeddings.
2. **Full Reranking:** Refines these candidates using the original, high-resolution embeddings, delivering the final top 20 results.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#implementation)Implementation

We created a custom dataset with over 20,000 unique PDF pages by merging:

- **ViDoRe Benchmark:** Designed for PDF documents retrieval evaluation.
- **UFO Dataset:** Visually rich documents paired with synthetic queries [generated by Daniel van Strien](https://huggingface.co/datasets/davanstrien/ufo-ColPali).
- **DocVQA Dataset:** A large set of document-derived Q&amp;A pairs.

Each document was processed into 32x32 grids, generating both full-resolution and pooled embeddings. **Full-resolution** embeddings consisted of 1,030 vectors per page, while **pooled embeddings** included mean and max pooling variants.

All embeddings were were stored and kept in RAM to avoid caching effects during retrieval speed experiments.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#experiment-setup)Experiment Setup

We evaluated retrieval quality with 1,000 queries. First, pooled embeddings retrieved the top 200 candidates. Then, full-resolution embeddings reranked them to produce the final top 20 results.

To measure performance, we used:

- **NDCG@20:** Measures ranking quality (how well the top results align with expectations).
- **Recall@20:** Measures the overlap between this method and the original ColPali retrieval.

## [](https://qdrant.tech/blog/colpali-qdrant-optimization/#results)Results

The experiment showed promising improvements in speed and accuracy. Retrieval time improved **13x** compared to using full-resolution embeddings alone.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#metrics)Metrics

|Pooling Type|NDCG@20|Recall@20|
|---|---|---|
|**Mean**|0.952|0.917|
|**Max**|0.759|0.656|

Mean pooling preserved nearly identical quality to the original ColPali, with NDCG@20 = 0.952 and Recall@20 = 0.917. Max pooling did not perform well enough to be considered viable since it sacrificed significant accuracy without delivering a meaningful speed advantage.

## [](https://qdrant.tech/blog/colpali-qdrant-optimization/#whats-next)What’s Next?

Future experiments could push these results even further:

- Investigating column-wise pooling for additional compression.
- Testing half-precision (float16) vectors to balance memory use and speed.
- Skipping special multivectors during prefetch to streamline retrieval.
- Combining quantization with oversampling for even faster search.

### [](https://qdrant.tech/blog/colpali-qdrant-optimization/#try-it-yourself)Try It Yourself

Curious to see this in action? Explore the full codebase and experiment with ColPali optimizations:

- **Demo Notebook:** [GitHub Repository](https://github.com/qdrant/demo-colpali-optimized)
- **Webinar Walkthrough:** [Watch Here](https://www.youtube.com/live/_h6SN1WwnLs?si=n8gwiIjJ5dnfucXC)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Optimizing%20ColPali%20for%20Retrieval%20at%20Scale%2C%2013x%20Faster%20Results.html</guid><pubDate>Sat, 12 Jul 2025 12:03:14 +0000</pubDate></item><item><title>MUVERA-让多向量检索与单向量搜索一样快</title><link>https://winnerineast.github.io/post/MUVERA--rang-duo-xiang-liang-jian-suo-yu-dan-xiang-liang-sou-suo-yi-yang-kuai.html</link><description>做RAG的朋友一定要看看 Google 这个新论文——MUVERA：让多向量检索与单向量搜索一样快 大家在RAG的检索内容过程都会遇到这种情况，如果用传统搜索（例如ElasticSearch），文档 = 1 个向量 → 快速但不准确。</description><guid isPermaLink="true">https://winnerineast.github.io/post/MUVERA--rang-duo-xiang-liang-jian-suo-yu-dan-xiang-liang-sou-suo-yi-yang-kuai.html</guid><pubDate>Sat, 12 Jul 2025 12:02:17 +0000</pubDate></item><item><title>Deep Research,  WebDancer,  WebSailor</title><link>https://winnerineast.github.io/post/Deep%20Research%2C%20%20WebDancer%2C%20%20WebSailor.html</link><description>
- 问：“一部知名电视剧：女二 1993 年入行；女一现任丈夫是浙江湖州人；男一六年后登上春晚。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Deep%20Research%2C%20%20WebDancer%2C%20%20WebSailor.html</guid><pubDate>Sat, 12 Jul 2025 12:01:43 +0000</pubDate></item><item><title>Building effective agents</title><link>https://winnerineast.github.io/post/Building%20effective%20agents.html</link><description>Over the past year, we've worked with dozens of teams building large language model (LLM) agents across industries. Consistently, the most successful implementations weren't using complex frameworks or specialized libraries. Instead, they were building with simple, composable patterns.

In this post, we share what we’ve learned from working with our customers and building agents ourselves, and give practical advice for developers on building effective agents.

## What are agents?

'Agent' can be defined in several ways. Some customers define agents as fully autonomous systems that operate independently over extended periods, using various tools to accomplish complex tasks. Others use the term to describe more prescriptive implementations that follow predefined workflows. At Anthropic, we categorize all these variations as **agentic systems**, but draw an important architectural distinction between **workflows** and **agents**:

- **Workflows** are systems where LLMs and tools are orchestrated through predefined code paths.
- **Agents**, on the other hand, are systems where LLMs dynamically direct their own processes and tool usage, maintaining control over how they accomplish tasks.

Below, we will explore both types of agentic systems in detail. In Appendix 1 (“Agents in Practice”), we describe two domains where customers have found particular value in using these kinds of systems.

## When (and when not) to use agents

When building applications with LLMs, we recommend finding the simplest solution possible, and only increasing complexity when needed. This might mean not building agentic systems at all. Agentic systems often trade latency and cost for better task performance, and you should consider when this tradeoff makes sense.

When more complexity is warranted, workflows offer predictability and consistency for well-defined tasks, whereas agents are the better option when flexibility and model-driven decision-making are needed at scale. For many applications, however, optimizing single LLM calls with retrieval and in-context examples is usually enough.

## When and how to use frameworks

There are many frameworks that make agentic systems easier to implement, including:

- [LangGraph](https://langchain-ai.github.io/langgraph/) from LangChain;
- Amazon Bedrock's [AI Agent framework](https://aws.amazon.com/bedrock/agents/);
- [Rivet](https://rivet.ironcladapp.com/), a drag and drop GUI LLM workflow builder; and
- [Vellum](https://www.vellum.ai/), another GUI tool for building and testing complex workflows.

These frameworks make it easy to get started by simplifying standard low-level tasks like calling LLMs, defining and parsing tools, and chaining calls together. However, they often create extra layers of abstraction that can obscure the underlying prompts ​​and responses, making them harder to debug. They can also make it tempting to add complexity when a simpler setup would suffice.

We suggest that developers start by using LLM APIs directly: many patterns can be implemented in a few lines of code. If you do use a framework, ensure you understand the underlying code. Incorrect assumptions about what's under the hood are a common source of customer error.

See our [cookbook](https://github.com/anthropics/anthropic-cookbook/tree/main/patterns/agents) for some sample implementations.

## Building blocks, workflows, and agents

In this section, we’ll explore the common patterns for agentic systems we’ve seen in production. We'll start with our foundational building block—the augmented LLM—and progressively increase complexity, from simple compositional workflows to autonomous agents.

### Building block: The augmented LLM

The basic building block of agentic systems is an LLM enhanced with augmentations such as retrieval, tools, and memory. Our current models can actively use these capabilities—generating their own search queries, selecting appropriate tools, and determining what information to retain.

We recommend focusing on two key aspects of the implementation: tailoring these capabilities to your specific use case and ensuring they provide an easy, well-documented interface for your LLM. While there are many ways to implement these augmentations, one approach is through our recently released [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol), which allows developers to integrate with a growing ecosystem of third-party tools with a simple [client implementation](https://modelcontextprotocol.io/tutorials/building-a-client#building-mcp-clients).

For the remainder of this post, we'll assume each LLM call has access to these augmented capabilities.

### Workflow: Prompt chaining

Prompt chaining decomposes a task into a sequence of steps, where each LLM call processes the output of the previous one. You can add programmatic checks (see 'gate” in the diagram below) on any intermediate steps to ensure that the process is still on track.

**When to use this workflow:** This workflow is ideal for situations where the task can be easily and cleanly decomposed into fixed subtasks. The main goal is to trade off latency for higher accuracy, by making each LLM call an easier task.

**Examples where prompt chaining is useful:**

- Generating Marketing copy, then translating it into a different language.
- Writing an outline of a document, checking that the outline meets certain criteria, then writing the document based on the outline.

### Workflow: Routing

Routing classifies an input and directs it to a specialized followup task. This workflow allows for separation of concerns, and building more specialized prompts. Without this workflow, optimizing for one kind of input can hurt performance on other inputs.

**When to use this workflow:** Routing works well for complex tasks where there are distinct categories that are better handled separately, and where classification can be handled accurately, either by an LLM or a more traditional classification model/algorithm.

**Examples where routing is useful:**

- Directing different types of customer service queries (general questions, refund requests, technical support) into different downstream processes, prompts, and tools.
- Routing easy/common questions to smaller models like Claude 3.5 Haiku and hard/unusual questions to more capable models like Claude 3.5 Sonnet to optimize cost and speed.

### Workflow: Parallelization

LLMs can sometimes work simultaneously on a task and have their outputs aggregated programmatically. This workflow, parallelization, manifests in two key variations:

- **Sectioning**: Breaking a task into independent subtasks run in parallel.
- **Voting:** Running the same task multiple times to get diverse outputs.

**When to use this workflow:** Parallelization is effective when the divided subtasks can be parallelized for speed, or when multiple perspectives or attempts are needed for higher confidence results. For complex tasks with multiple considerations, LLMs generally perform better when each consideration is handled by a separate LLM call, allowing focused attention on each specific aspect.

**Examples where parallelization is useful:**

- **Sectioning**:
- Implementing guardrails where one model instance processes user queries while another screens them for inappropriate content or requests. This tends to perform better than having the same LLM call handle both guardrails and the core response.
- Automating evals for evaluating LLM performance, where each LLM call evaluates a different aspect of the model’s performance on a given prompt.
- **Voting**:
- Reviewing a piece of code for vulnerabilities, where several different prompts review and flag the code if they find a problem.
- Evaluating whether a given piece of content is inappropriate, with multiple prompts evaluating different aspects or requiring different vote thresholds to balance false positives and negatives.

### Workflow: Orchestrator-workers

In the orchestrator-workers workflow, a central LLM dynamically breaks down tasks, delegates them to worker LLMs, and synthesizes their results.

**When to use this workflow:** This workflow is well-suited for complex tasks where you can’t predict the subtasks needed (in coding, for example, the number of files that need to be changed and the nature of the change in each file likely depend on the task). Whereas it’s topographically similar, the key difference from parallelization is its flexibility—subtasks aren't pre-defined, but determined by the orchestrator based on the specific input.

**Example where orchestrator-workers is useful:**

- Coding products that make complex changes to multiple files each time.
- Search tasks that involve gathering and analyzing information from multiple sources for possible relevant information.

### Workflow: Evaluator-optimizer

In the evaluator-optimizer workflow, one LLM call generates a response while another provides evaluation and feedback in a loop.

**When to use this workflow:** This workflow is particularly effective when we have clear evaluation criteria, and when iterative refinement provides measurable value. The two signs of good fit are, first, that LLM responses can be demonstrably improved when a human articulates their feedback; and second, that the LLM can provide such feedback. This is analogous to the iterative writing process a human writer might go through when producing a polished document.

**Examples where evaluator-optimizer is useful:**

- Literary translation where there are nuances that the translator LLM might not capture initially, but where an evaluator LLM can provide useful critiques.
- Complex search tasks that require multiple rounds of searching and analysis to gather comprehensive information, where the evaluator decides whether further searches are warranted.

### Agents

Agents are emerging in production as LLMs mature in key capabilities—understanding complex inputs, engaging in reasoning and planning, using tools reliably, and recovering from errors. Agents begin their work with either a command from, or interactive discussion with, the human user. Once the task is clear, agents plan and operate independently, potentially returning to the human for further information or judgement. During execution, it's crucial for the agents to gain “ground truth” from the environment at each step (such as tool call results or code execution) to assess its progress. Agents can then pause for human feedback at checkpoints or when encountering blockers. The task often terminates upon completion, but it’s also common to include stopping conditions (such as a maximum number of iterations) to maintain control.

Agents can handle sophisticated tasks, but their implementation is often straightforward. They are typically just LLMs using tools based on environmental feedback in a loop. It is therefore crucial to design toolsets and their documentation clearly and thoughtfully. We expand on best practices for tool development in Appendix 2 ('Prompt Engineering your Tools').

**When to use agents:** Agents can be used for open-ended problems where it’s difficult or impossible to predict the required number of steps, and where you can’t hardcode a fixed path. The LLM will potentially operate for many turns, and you must have some level of trust in its decision-making. Agents' autonomy makes them ideal for scaling tasks in trusted environments.

The autonomous nature of agents means higher costs, and the potential for compounding errors. We recommend extensive testing in sandboxed environments, along with the appropriate guardrails.

**Examples where agents are useful:**

The following examples are from our own implementations:

- A coding Agent to resolve [SWE-bench tasks](https://www.anthropic.com/research/swe-bench-sonnet), which involve edits to many files based on a task description;
- Our [“computer use” reference implementation](https://github.com/anthropics/anthropic-quickstarts/tree/main/computer-use-demo), where Claude uses a computer to accomplish tasks.

## Combining and customizing these patterns

These building blocks aren't prescriptive. They're common patterns that developers can shape and combine to fit different use cases. The key to success, as with any LLM features, is measuring performance and iterating on implementations. To repeat: you should consider adding complexity *only* when it demonstrably improves outcomes.

## Summary

Success in the LLM space isn't about building the most sophisticated system. It's about building the *right* system for your needs. Start with simple prompts, optimize them with comprehensive evaluation, and add multi-step agentic systems only when simpler solutions fall short.

When implementing agents, we try to follow three core principles:

1. Maintain **simplicity** in your agent's design.
2. Prioritize **transparency** by explicitly showing the agent’s planning steps.
3. Carefully craft your agent-computer interface (ACI) through thorough tool **documentation and testing**.

Frameworks can help you get started quickly, but don't hesitate to reduce abstraction layers and build with basic components as you move to production. By following these principles, you can create agents that are not only powerful but also reliable, maintainable, and trusted by their users.

### Acknowledgements

Written by Erik Schluntz and Barry Zhang. This work draws upon our experiences building agents at Anthropic and the valuable insights shared by our customers, for which we're deeply grateful.

## Appendix 1: Agents in practice

Our work with customers has revealed two particularly promising applications for AI agents that demonstrate the practical value of the patterns discussed above. Both applications illustrate how agents add the most value for tasks that require both conversation and action, have clear success criteria, enable feedback loops, and integrate meaningful human oversight.

### A. Customer support

Customer support combines familiar chatbot interfaces with enhanced capabilities through tool integration. This is a natural fit for more open-ended agents because:

- Support interactions naturally follow a conversation flow while requiring access to external information and actions;
- Tools can be integrated to pull customer data, order history, and knowledge base articles;
- Actions such as issuing refunds or updating tickets can be handled programmatically; and
- Success can be clearly measured through user-defined resolutions.

Several companies have demonstrated the viability of this approach through usage-based pricing models that charge only for successful resolutions, showing confidence in their agents' effectiveness.

### B. Coding agents

The software development space has shown remarkable potential for LLM features, with capabilities evolving from code completion to autonomous problem-solving. Agents are particularly effective because:

- Code solutions are verifiable through automated tests;
- Agents can iterate on solutions using test results as feedback;
- The problem space is well-defined and structured; and
- Output quality can be measured objectively.

In our own implementation, agents can now solve real GitHub issues in the [SWE-bench Verified](https://www.anthropic.com/research/swe-bench-sonnet) benchmark based on the pull request description alone. However, whereas automated testing helps verify functionality, human review remains crucial for ensuring solutions align with broader system requirements.

## Appendix 2: Prompt engineering your tools

No matter which agentic system you're building, tools will likely be an important part of your agent. [Tools](https://www.anthropic.com/news/tool-use-ga) enable Claude to interact with external services and APIs by specifying their exact structure and definition in our API. When Claude responds, it will include a [tool use block](https://docs.anthropic.com/en/docs/build-with-claude/tool-use#example-api-response-with-a-tool-use-content-block) in the API response if it plans to invoke a tool. Tool definitions and specifications should be given just as much prompt engineering attention as your overall prompts. In this brief appendix, we describe how to prompt engineer your tools.

There are often several ways to specify the same action. For instance, you can specify a file edit by writing a diff, or by rewriting the entire file. For structured output, you can return code inside markdown or inside JSON. In software engineering, differences like these are cosmetic and can be converted losslessly from one to the other. However, some formats are much more difficult for an LLM to write than others. Writing a diff requires knowing how many lines are changing in the chunk header before the new code is written. Writing code inside JSON (compared to markdown) requires extra escaping of newlines and quotes.

Our suggestions for deciding on tool formats are the following:

- Give the model enough tokens to 'think' before it writes itself into a corner.
- Keep the format close to what the model has seen naturally occurring in text on the internet.
- Make sure there's no formatting 'overhead' such as having to keep an accurate count of thousands of lines of code, or string-escaping any code it writes.

One rule of thumb is to think about how much effort goes into human-computer interfaces (HCI), and plan to invest just as much effort in creating good *agent*\-computer interfaces (ACI). Here are some thoughts on how to do so:

- Put yourself in the model's shoes. Is it obvious how to use this tool, based on the description and parameters, or would you need to think carefully about it? If so, then it’s probably also true for the model. A good tool definition often includes example usage, edge cases, input format requirements, and clear boundaries from other tools.
- How can you change parameter names or descriptions to make things more obvious? Think of this as writing a great docstring for a junior developer on your team. This is especially important when using many similar tools.
- Test how the model uses your tools: Run many example inputs in our [workbench](https://console.anthropic.com/workbench) to see what mistakes the model makes, and iterate.
- [Poka-yoke](https://en.wikipedia.org/wiki/Poka-yoke) your tools. Change the arguments so that it is harder to make mistakes.

While building our agent for [SWE-bench](https://www.anthropic.com/research/swe-bench-sonnet), we actually spent more time optimizing our tools than the overall prompt. For example, we found that the model would make mistakes with tools using relative filepaths after the agent had moved out of the root directory. To fix this, we changed the tool to always require absolute filepaths—and we found that the model used this method flawlessly.。</description><guid isPermaLink="true">https://winnerineast.github.io/post/Building%20effective%20agents.html</guid><pubDate>Sat, 12 Jul 2025 12:01:15 +0000</pubDate></item><item><title>AI智慧与检索的巅峰融合：RAG解锁下一代信息生成新架构</title><link>https://winnerineast.github.io/post/AI-zhi-hui-yu-jian-suo-de-dian-feng-rong-he-%EF%BC%9ARAG-jie-suo-xia-yi-dai-xin-xi-sheng-cheng-xin-jia-gou.html</link><description>**GPTDAOCN-e/acc** @GPTDAOCN [2024-12-11](https://x.com/GPTDAOCN/status/1866947666690838557)

AI智慧与检索的巅峰融合：RAG解锁下一代信息生成新架构

这张图展示了'检索增强生成（Retrieval-Augmented Generation，RAG）'技术的不同架构，用来描述如何结合信息检索和生成式AI模型（如GPT）来更好地回答问题或生成内容。</description><guid isPermaLink="true">https://winnerineast.github.io/post/AI-zhi-hui-yu-jian-suo-de-dian-feng-rong-he-%EF%BC%9ARAG-jie-suo-xia-yi-dai-xin-xi-sheng-cheng-xin-jia-gou.html</guid><pubDate>Sat, 12 Jul 2025 12:00:46 +0000</pubDate></item><item><title>【论文推荐】DeepResearch</title><link>https://winnerineast.github.io/post/%E3%80%90-lun-wen-tui-jian-%E3%80%91DeepResearch.html</link><description>（好一些的综述）[https://arxiv.org/abs/2506.18096](https://t.co/KqENoLuAiv) 
（过于求全反而缺乏洞见的综述） [https://arxiv.org/pdf/2506.12594](https://t.co/xeWo94wXZq) 
（评估方法，从报告质量和引用精度两个角度评估）[https://arxiv.org/pdf/2506.11763](https://t.co/vKR0NO4HLO)

（推荐，带UI，字节开源的基于LangGraph的DeepFlow）[https://github.com/bytedance/deer-flow…](https://t.co/EtqKMqlKBf) 
（推荐，带UI，Gemini基于LangGraph的Deep Search实现，比较简单） [https://github.com/google-gemini/gemini-fullstack-langgraph-quickstart…](https://t.co/VTe064Fsx2) 
（没有UI，但是功能比较丰富）[https://github.com/foreveryh/mentis/tree/main/super_agents/deep_research…](https://t.co/9TJy0juGLG)
[](https://t.co/VTe064Fsx2)
（基于smolagents框架，比较简单）[https://github.com/huggingface/smolagents/tree/main/examples/open_deep_research…](https://t.co/9wXwCsbxeL) （基于OpenAI Agents 库实现，比较简单） [https://huggingface.co/spaces/mallocode200/Deep_Research_Assistant/blob/main/research_manager.py](https://t.co/BaoHko5WT9)。</description><guid isPermaLink="true">https://winnerineast.github.io/post/%E3%80%90-lun-wen-tui-jian-%E3%80%91DeepResearch.html</guid><pubDate>Sat, 12 Jul 2025 10:13:59 +0000</pubDate></item></channel></rss>